{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\ncommon.register('cat', _cat, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'number'\n  }\n});\n\n//@\n//@ ### cat([options,] file [, file ...])\n//@ ### cat([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n`: number all output lines\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = cat('file*.txt');\n//@ var str = cat('file1', 'file2');\n//@ var str = cat(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Returns a string containing the given file, or a concatenated string\n//@ containing the files if more than one file is given (a new line character is\n//@ introduced between each file).\nfunction _cat(options, files) {\n  var cat = common.readFromPipe();\n  if (!files && !cat) common.error('no paths given');\n  files = [].slice.call(arguments, 1);\n  files.forEach(function (file) {\n    if (!fs.existsSync(file)) {\n      common.error('no such file or directory: ' + file);\n    } else if (common.statFollowLinks(file).isDirectory()) {\n      common.error(file + ': Is a directory');\n    }\n    cat += fs.readFileSync(file, 'utf8');\n  });\n  if (options.number) {\n    cat = addNumbers(cat);\n  }\n  return cat;\n}\nmodule.exports = _cat;\nfunction addNumbers(cat) {\n  var lines = cat.split('\\n');\n  var lastLine = lines.pop();\n  lines = lines.map(function (line, i) {\n    return numberedLine(i + 1, line);\n  });\n  if (lastLine.length) {\n    lastLine = numberedLine(lines.length + 1, lastLine);\n  }\n  lines.push(lastLine);\n  return lines.join('\\n');\n}\nfunction numberedLine(n, line) {\n  // GNU cat use six pad start number + tab. See http://lingrok.org/xref/coreutils/src/cat.c#57\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n  var number = ('     ' + n).slice(-6) + '\\t';\n  return number + line;\n}","map":{"version":3,"names":["common","require","fs","register","_cat","canReceivePipe","cmdOptions","options","files","cat","readFromPipe","error","slice","call","arguments","forEach","file","existsSync","statFollowLinks","isDirectory","readFileSync","number","addNumbers","module","exports","lines","split","lastLine","pop","map","line","i","numberedLine","length","push","join","n"],"sources":["/home/lenovo/node_modules/shelljs/src/cat.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('cat', _cat, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'number',\n  },\n});\n\n//@\n//@ ### cat([options,] file [, file ...])\n//@ ### cat([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n`: number all output lines\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = cat('file*.txt');\n//@ var str = cat('file1', 'file2');\n//@ var str = cat(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Returns a string containing the given file, or a concatenated string\n//@ containing the files if more than one file is given (a new line character is\n//@ introduced between each file).\nfunction _cat(options, files) {\n  var cat = common.readFromPipe();\n\n  if (!files && !cat) common.error('no paths given');\n\n  files = [].slice.call(arguments, 1);\n\n  files.forEach(function (file) {\n    if (!fs.existsSync(file)) {\n      common.error('no such file or directory: ' + file);\n    } else if (common.statFollowLinks(file).isDirectory()) {\n      common.error(file + ': Is a directory');\n    }\n\n    cat += fs.readFileSync(file, 'utf8');\n  });\n\n  if (options.number) {\n    cat = addNumbers(cat);\n  }\n\n  return cat;\n}\nmodule.exports = _cat;\n\nfunction addNumbers(cat) {\n  var lines = cat.split('\\n');\n  var lastLine = lines.pop();\n\n  lines = lines.map(function (line, i) {\n    return numberedLine(i + 1, line);\n  });\n\n  if (lastLine.length) {\n    lastLine = numberedLine(lines.length + 1, lastLine);\n  }\n  lines.push(lastLine);\n\n  return lines.join('\\n');\n}\n\nfunction numberedLine(n, line) {\n  // GNU cat use six pad start number + tab. See http://lingrok.org/xref/coreutils/src/cat.c#57\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n  var number = ('     ' + n).slice(-6) + '\\t';\n  return number + line;\n}\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AAEtBD,MAAM,CAACG,QAAQ,CAAC,KAAK,EAAEC,IAAI,EAAE;EAC3BC,cAAc,EAAE,IAAI;EACpBC,UAAU,EAAE;IACV,GAAG,EAAE;EACP;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,IAAIA,CAACG,OAAO,EAAEC,KAAK,EAAE;EAC5B,IAAIC,GAAG,GAAGT,MAAM,CAACU,YAAY,CAAC,CAAC;EAE/B,IAAI,CAACF,KAAK,IAAI,CAACC,GAAG,EAAET,MAAM,CAACW,KAAK,CAAC,gBAAgB,CAAC;EAElDH,KAAK,GAAG,EAAE,CAACI,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EAEnCN,KAAK,CAACO,OAAO,CAAC,UAAUC,IAAI,EAAE;IAC5B,IAAI,CAACd,EAAE,CAACe,UAAU,CAACD,IAAI,CAAC,EAAE;MACxBhB,MAAM,CAACW,KAAK,CAAC,6BAA6B,GAAGK,IAAI,CAAC;IACpD,CAAC,MAAM,IAAIhB,MAAM,CAACkB,eAAe,CAACF,IAAI,CAAC,CAACG,WAAW,CAAC,CAAC,EAAE;MACrDnB,MAAM,CAACW,KAAK,CAACK,IAAI,GAAG,kBAAkB,CAAC;IACzC;IAEAP,GAAG,IAAIP,EAAE,CAACkB,YAAY,CAACJ,IAAI,EAAE,MAAM,CAAC;EACtC,CAAC,CAAC;EAEF,IAAIT,OAAO,CAACc,MAAM,EAAE;IAClBZ,GAAG,GAAGa,UAAU,CAACb,GAAG,CAAC;EACvB;EAEA,OAAOA,GAAG;AACZ;AACAc,MAAM,CAACC,OAAO,GAAGpB,IAAI;AAErB,SAASkB,UAAUA,CAACb,GAAG,EAAE;EACvB,IAAIgB,KAAK,GAAGhB,GAAG,CAACiB,KAAK,CAAC,IAAI,CAAC;EAC3B,IAAIC,QAAQ,GAAGF,KAAK,CAACG,GAAG,CAAC,CAAC;EAE1BH,KAAK,GAAGA,KAAK,CAACI,GAAG,CAAC,UAAUC,IAAI,EAAEC,CAAC,EAAE;IACnC,OAAOC,YAAY,CAACD,CAAC,GAAG,CAAC,EAAED,IAAI,CAAC;EAClC,CAAC,CAAC;EAEF,IAAIH,QAAQ,CAACM,MAAM,EAAE;IACnBN,QAAQ,GAAGK,YAAY,CAACP,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAEN,QAAQ,CAAC;EACrD;EACAF,KAAK,CAACS,IAAI,CAACP,QAAQ,CAAC;EAEpB,OAAOF,KAAK,CAACU,IAAI,CAAC,IAAI,CAAC;AACzB;AAEA,SAASH,YAAYA,CAACI,CAAC,EAAEN,IAAI,EAAE;EAC7B;EACA;EACA,IAAIT,MAAM,GAAG,CAAC,OAAO,GAAGe,CAAC,EAAExB,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;EAC3C,OAAOS,MAAM,GAAGS,IAAI;AACtB"},"metadata":{},"sourceType":"script","externalDependencies":[]}