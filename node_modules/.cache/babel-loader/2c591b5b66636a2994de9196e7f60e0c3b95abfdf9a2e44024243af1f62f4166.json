{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\ncommon.register('touch', _touch, {\n  cmdOptions: {\n    'a': 'atime_only',\n    'c': 'no_create',\n    'd': 'date',\n    'm': 'mtime_only',\n    'r': 'reference'\n  }\n});\n\n//@\n//@ ### touch([options,] file [, file ...])\n//@ ### touch([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-a`: Change only the access time\n//@ + `-c`: Do not create any files\n//@ + `-m`: Change only the modification time\n//@ + `-d DATE`: Parse `DATE` and use it instead of current time\n//@ + `-r FILE`: Use `FILE`'s times instead of current time\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ touch('source.js');\n//@ touch('-c', '/path/to/some/dir/source.js');\n//@ touch({ '-r': FILE }, '/path/to/some/dir/source.js');\n//@ ```\n//@\n//@ Update the access and modification times of each `FILE` to the current time.\n//@ A `FILE` argument that does not exist is created empty, unless `-c` is supplied.\n//@ This is a partial implementation of [`touch(1)`](http://linux.die.net/man/1/touch).\nfunction _touch(opts, files) {\n  if (!files) {\n    common.error('no files given');\n  } else if (typeof files === 'string') {\n    files = [].slice.call(arguments, 1);\n  } else {\n    common.error('file arg should be a string file path or an Array of string file paths');\n  }\n  files.forEach(function (f) {\n    touchFile(opts, f);\n  });\n  return '';\n}\nfunction touchFile(opts, file) {\n  var stat = tryStatFile(file);\n  if (stat && stat.isDirectory()) {\n    // don't error just exit\n    return;\n  }\n\n  // if the file doesn't already exist and the user has specified --no-create then\n  // this script is finished\n  if (!stat && opts.no_create) {\n    return;\n  }\n\n  // open the file and then close it. this will create it if it doesn't exist but will\n  // not truncate the file\n  fs.closeSync(fs.openSync(file, 'a'));\n\n  //\n  // Set timestamps\n  //\n\n  // setup some defaults\n  var now = new Date();\n  var mtime = opts.date || now;\n  var atime = opts.date || now;\n\n  // use reference file\n  if (opts.reference) {\n    var refStat = tryStatFile(opts.reference);\n    if (!refStat) {\n      common.error('failed to get attributess of ' + opts.reference);\n    }\n    mtime = refStat.mtime;\n    atime = refStat.atime;\n  } else if (opts.date) {\n    mtime = opts.date;\n    atime = opts.date;\n  }\n  if (opts.atime_only && opts.mtime_only) {\n    // keep the new values of mtime and atime like GNU\n  } else if (opts.atime_only) {\n    mtime = stat.mtime;\n  } else if (opts.mtime_only) {\n    atime = stat.atime;\n  }\n  fs.utimesSync(file, atime, mtime);\n}\nmodule.exports = _touch;\nfunction tryStatFile(filePath) {\n  try {\n    return common.statFollowLinks(filePath);\n  } catch (e) {\n    return null;\n  }\n}","map":{"version":3,"names":["common","require","fs","register","_touch","cmdOptions","opts","files","error","slice","call","arguments","forEach","f","touchFile","file","stat","tryStatFile","isDirectory","no_create","closeSync","openSync","now","Date","mtime","date","atime","reference","refStat","atime_only","mtime_only","utimesSync","module","exports","filePath","statFollowLinks","e"],"sources":["/home/lenovo/node_modules/shelljs/src/touch.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('touch', _touch, {\n  cmdOptions: {\n    'a': 'atime_only',\n    'c': 'no_create',\n    'd': 'date',\n    'm': 'mtime_only',\n    'r': 'reference',\n  },\n});\n\n//@\n//@ ### touch([options,] file [, file ...])\n//@ ### touch([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-a`: Change only the access time\n//@ + `-c`: Do not create any files\n//@ + `-m`: Change only the modification time\n//@ + `-d DATE`: Parse `DATE` and use it instead of current time\n//@ + `-r FILE`: Use `FILE`'s times instead of current time\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ touch('source.js');\n//@ touch('-c', '/path/to/some/dir/source.js');\n//@ touch({ '-r': FILE }, '/path/to/some/dir/source.js');\n//@ ```\n//@\n//@ Update the access and modification times of each `FILE` to the current time.\n//@ A `FILE` argument that does not exist is created empty, unless `-c` is supplied.\n//@ This is a partial implementation of [`touch(1)`](http://linux.die.net/man/1/touch).\nfunction _touch(opts, files) {\n  if (!files) {\n    common.error('no files given');\n  } else if (typeof files === 'string') {\n    files = [].slice.call(arguments, 1);\n  } else {\n    common.error('file arg should be a string file path or an Array of string file paths');\n  }\n\n  files.forEach(function (f) {\n    touchFile(opts, f);\n  });\n  return '';\n}\n\nfunction touchFile(opts, file) {\n  var stat = tryStatFile(file);\n\n  if (stat && stat.isDirectory()) {\n    // don't error just exit\n    return;\n  }\n\n  // if the file doesn't already exist and the user has specified --no-create then\n  // this script is finished\n  if (!stat && opts.no_create) {\n    return;\n  }\n\n  // open the file and then close it. this will create it if it doesn't exist but will\n  // not truncate the file\n  fs.closeSync(fs.openSync(file, 'a'));\n\n  //\n  // Set timestamps\n  //\n\n  // setup some defaults\n  var now = new Date();\n  var mtime = opts.date || now;\n  var atime = opts.date || now;\n\n  // use reference file\n  if (opts.reference) {\n    var refStat = tryStatFile(opts.reference);\n    if (!refStat) {\n      common.error('failed to get attributess of ' + opts.reference);\n    }\n    mtime = refStat.mtime;\n    atime = refStat.atime;\n  } else if (opts.date) {\n    mtime = opts.date;\n    atime = opts.date;\n  }\n\n  if (opts.atime_only && opts.mtime_only) {\n    // keep the new values of mtime and atime like GNU\n  } else if (opts.atime_only) {\n    mtime = stat.mtime;\n  } else if (opts.mtime_only) {\n    atime = stat.atime;\n  }\n\n  fs.utimesSync(file, atime, mtime);\n}\n\nmodule.exports = _touch;\n\nfunction tryStatFile(filePath) {\n  try {\n    return common.statFollowLinks(filePath);\n  } catch (e) {\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}