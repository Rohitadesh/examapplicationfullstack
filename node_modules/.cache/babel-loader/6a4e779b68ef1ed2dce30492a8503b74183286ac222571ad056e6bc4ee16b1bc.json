{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\ncommon.register('grep', _grep, {\n  globStart: 2,\n  // don't glob-expand the regex\n  canReceivePipe: true,\n  cmdOptions: {\n    'v': 'inverse',\n    'l': 'nameOnly',\n    'i': 'ignoreCase'\n  }\n});\n\n//@\n//@ ### grep([options,] regex_filter, file [, file ...])\n//@ ### grep([options,] regex_filter, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-v`: Invert `regex_filter` (only print non-matching lines).\n//@ + `-l`: Print only filenames of matching files.\n//@ + `-i`: Ignore case.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('-v', 'GLOBAL_VARIABLE', '*.js');\n//@ grep('GLOBAL_VARIABLE', '*.js');\n//@ ```\n//@\n//@ Reads input string from given files and returns a string containing all lines of the\n//@ file that match the given `regex_filter`.\nfunction _grep(options, regex, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n  if (!files && !pipe) common.error('no paths given', 2);\n  files = [].slice.call(arguments, 2);\n  if (pipe) {\n    files.unshift('-');\n  }\n  var grep = [];\n  if (options.ignoreCase) {\n    regex = new RegExp(regex, 'i');\n  }\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, {\n        continue: true\n      });\n      return;\n    }\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    if (options.nameOnly) {\n      if (contents.match(regex)) {\n        grep.push(file);\n      }\n    } else {\n      var lines = contents.split('\\n');\n      lines.forEach(function (line) {\n        var matched = line.match(regex);\n        if (options.inverse && !matched || !options.inverse && matched) {\n          grep.push(line);\n        }\n      });\n    }\n  });\n  return grep.join('\\n') + '\\n';\n}\nmodule.exports = _grep;","map":{"version":3,"names":["common","require","fs","register","_grep","globStart","canReceivePipe","cmdOptions","options","regex","files","pipe","readFromPipe","error","slice","call","arguments","unshift","grep","ignoreCase","RegExp","forEach","file","existsSync","continue","contents","readFileSync","nameOnly","match","push","lines","split","line","matched","inverse","join","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/grep.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('grep', _grep, {\n  globStart: 2, // don't glob-expand the regex\n  canReceivePipe: true,\n  cmdOptions: {\n    'v': 'inverse',\n    'l': 'nameOnly',\n    'i': 'ignoreCase',\n  },\n});\n\n//@\n//@ ### grep([options,] regex_filter, file [, file ...])\n//@ ### grep([options,] regex_filter, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-v`: Invert `regex_filter` (only print non-matching lines).\n//@ + `-l`: Print only filenames of matching files.\n//@ + `-i`: Ignore case.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('-v', 'GLOBAL_VARIABLE', '*.js');\n//@ grep('GLOBAL_VARIABLE', '*.js');\n//@ ```\n//@\n//@ Reads input string from given files and returns a string containing all lines of the\n//@ file that match the given `regex_filter`.\nfunction _grep(options, regex, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no paths given', 2);\n\n  files = [].slice.call(arguments, 2);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var grep = [];\n  if (options.ignoreCase) {\n    regex = new RegExp(regex, 'i');\n  }\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, { continue: true });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    if (options.nameOnly) {\n      if (contents.match(regex)) {\n        grep.push(file);\n      }\n    } else {\n      var lines = contents.split('\\n');\n      lines.forEach(function (line) {\n        var matched = line.match(regex);\n        if ((options.inverse && !matched) || (!options.inverse && matched)) {\n          grep.push(line);\n        }\n      });\n    }\n  });\n\n  return grep.join('\\n') + '\\n';\n}\nmodule.exports = _grep;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AAEtBD,MAAM,CAACG,QAAQ,CAAC,MAAM,EAAEC,KAAK,EAAE;EAC7BC,SAAS,EAAE,CAAC;EAAE;EACdC,cAAc,EAAE,IAAI;EACpBC,UAAU,EAAE;IACV,GAAG,EAAE,SAAS;IACd,GAAG,EAAE,UAAU;IACf,GAAG,EAAE;EACP;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,KAAKA,CAACI,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACpC;EACA,IAAIC,IAAI,GAAGX,MAAM,CAACY,YAAY,CAAC,CAAC;EAEhC,IAAI,CAACF,KAAK,IAAI,CAACC,IAAI,EAAEX,MAAM,CAACa,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC;EAEtDH,KAAK,GAAG,EAAE,CAACI,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EAEnC,IAAIL,IAAI,EAAE;IACRD,KAAK,CAACO,OAAO,CAAC,GAAG,CAAC;EACpB;EAEA,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIV,OAAO,CAACW,UAAU,EAAE;IACtBV,KAAK,GAAG,IAAIW,MAAM,CAACX,KAAK,EAAE,GAAG,CAAC;EAChC;EACAC,KAAK,CAACW,OAAO,CAAC,UAAUC,IAAI,EAAE;IAC5B,IAAI,CAACpB,EAAE,CAACqB,UAAU,CAACD,IAAI,CAAC,IAAIA,IAAI,KAAK,GAAG,EAAE;MACxCtB,MAAM,CAACa,KAAK,CAAC,6BAA6B,GAAGS,IAAI,EAAE,CAAC,EAAE;QAAEE,QAAQ,EAAE;MAAK,CAAC,CAAC;MACzE;IACF;IAEA,IAAIC,QAAQ,GAAGH,IAAI,KAAK,GAAG,GAAGX,IAAI,GAAGT,EAAE,CAACwB,YAAY,CAACJ,IAAI,EAAE,MAAM,CAAC;IAClE,IAAId,OAAO,CAACmB,QAAQ,EAAE;MACpB,IAAIF,QAAQ,CAACG,KAAK,CAACnB,KAAK,CAAC,EAAE;QACzBS,IAAI,CAACW,IAAI,CAACP,IAAI,CAAC;MACjB;IACF,CAAC,MAAM;MACL,IAAIQ,KAAK,GAAGL,QAAQ,CAACM,KAAK,CAAC,IAAI,CAAC;MAChCD,KAAK,CAACT,OAAO,CAAC,UAAUW,IAAI,EAAE;QAC5B,IAAIC,OAAO,GAAGD,IAAI,CAACJ,KAAK,CAACnB,KAAK,CAAC;QAC/B,IAAKD,OAAO,CAAC0B,OAAO,IAAI,CAACD,OAAO,IAAM,CAACzB,OAAO,CAAC0B,OAAO,IAAID,OAAQ,EAAE;UAClEf,IAAI,CAACW,IAAI,CAACG,IAAI,CAAC;QACjB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAOd,IAAI,CAACiB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI;AAC/B;AACAC,MAAM,CAACC,OAAO,GAAGjC,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}