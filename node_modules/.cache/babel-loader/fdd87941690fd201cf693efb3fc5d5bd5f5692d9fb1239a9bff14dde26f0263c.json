{"ast":null,"code":"var path = require('path');\nvar fs = require('fs');\nvar common = require('./common');\nvar glob = require('glob');\nvar globPatternRecursive = path.sep + '**';\ncommon.register('ls', _ls, {\n  cmdOptions: {\n    'R': 'recursive',\n    'A': 'all',\n    'L': 'link',\n    'a': 'all_deprecated',\n    'd': 'directory',\n    'l': 'long'\n  }\n});\n\n//@\n//@ ### ls([options,] [path, ...])\n//@ ### ls([options,] path_array)\n//@\n//@ Available options:\n//@\n//@ + `-R`: recursive\n//@ + `-A`: all files (include files beginning with `.`, except for `.` and `..`)\n//@ + `-L`: follow symlinks\n//@ + `-d`: list directories themselves, not their contents\n//@ + `-l`: list objects representing each file, each with fields containing `ls\n//@         -l` output fields. See\n//@         [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats)\n//@         for more info\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ ls('projs/*.js');\n//@ ls('-R', '/users/me', '/tmp');\n//@ ls('-R', ['/users/me', '/tmp']); // same as above\n//@ ls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}\n//@ ```\n//@\n//@ Returns array of files in the given `path`, or files in\n//@ the current directory if no `path` is  provided.\nfunction _ls(options, paths) {\n  if (options.all_deprecated) {\n    // We won't support the -a option as it's hard to image why it's useful\n    // (it includes '.' and '..' in addition to '.*' files)\n    // For backwards compatibility we'll dump a deprecated message and proceed as before\n    common.log('ls: Option -a is deprecated. Use -A instead');\n    options.all = true;\n  }\n  if (!paths) {\n    paths = ['.'];\n  } else {\n    paths = [].slice.call(arguments, 1);\n  }\n  var list = [];\n  function pushFile(abs, relName, stat) {\n    if (process.platform === 'win32') {\n      relName = relName.replace(/\\\\/g, '/');\n    }\n    if (options.long) {\n      stat = stat || (options.link ? common.statFollowLinks(abs) : common.statNoFollowLinks(abs));\n      list.push(addLsAttributes(relName, stat));\n    } else {\n      // list.push(path.relative(rel || '.', file));\n      list.push(relName);\n    }\n  }\n  paths.forEach(function (p) {\n    var stat;\n    try {\n      stat = options.link ? common.statFollowLinks(p) : common.statNoFollowLinks(p);\n      // follow links to directories by default\n      if (stat.isSymbolicLink()) {\n        /* istanbul ignore next */\n        // workaround for https://github.com/shelljs/shelljs/issues/795\n        // codecov seems to have a bug that miscalculate this block as uncovered.\n        // but according to nyc report this block does get covered.\n        try {\n          var _stat = common.statFollowLinks(p);\n          if (_stat.isDirectory()) {\n            stat = _stat;\n          }\n        } catch (_) {} // bad symlink, treat it like a file\n      }\n    } catch (e) {\n      common.error('no such file or directory: ' + p, 2, {\n        continue: true\n      });\n      return;\n    }\n\n    // If the stat succeeded\n    if (stat.isDirectory() && !options.directory) {\n      if (options.recursive) {\n        // use glob, because it's simple\n        glob.sync(p + globPatternRecursive, {\n          dot: options.all,\n          follow: options.link\n        }).forEach(function (item) {\n          // Glob pattern returns the directory itself and needs to be filtered out.\n          if (path.relative(p, item)) {\n            pushFile(item, path.relative(p, item));\n          }\n        });\n      } else if (options.all) {\n        // use fs.readdirSync, because it's fast\n        fs.readdirSync(p).forEach(function (item) {\n          pushFile(path.join(p, item), item);\n        });\n      } else {\n        // use fs.readdirSync and then filter out secret files\n        fs.readdirSync(p).forEach(function (item) {\n          if (item[0] !== '.') {\n            pushFile(path.join(p, item), item);\n          }\n        });\n      }\n    } else {\n      pushFile(p, p, stat);\n    }\n  });\n\n  // Add methods, to make this more compatible with ShellStrings\n  return list;\n}\nfunction addLsAttributes(pathName, stats) {\n  // Note: this object will contain more information than .toString() returns\n  stats.name = pathName;\n  stats.toString = function () {\n    // Return a string resembling unix's `ls -l` format\n    return [this.mode, this.nlink, this.uid, this.gid, this.size, this.mtime, this.name].join(' ');\n  };\n  return stats;\n}\nmodule.exports = _ls;","map":{"version":3,"names":["path","require","fs","common","glob","globPatternRecursive","sep","register","_ls","cmdOptions","options","paths","all_deprecated","log","all","slice","call","arguments","list","pushFile","abs","relName","stat","process","platform","replace","long","link","statFollowLinks","statNoFollowLinks","push","addLsAttributes","forEach","p","isSymbolicLink","_stat","isDirectory","_","e","error","continue","directory","recursive","sync","dot","follow","item","relative","readdirSync","join","pathName","stats","name","toString","mode","nlink","uid","gid","size","mtime","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/ls.js"],"sourcesContent":["var path = require('path');\nvar fs = require('fs');\nvar common = require('./common');\nvar glob = require('glob');\n\nvar globPatternRecursive = path.sep + '**';\n\ncommon.register('ls', _ls, {\n  cmdOptions: {\n    'R': 'recursive',\n    'A': 'all',\n    'L': 'link',\n    'a': 'all_deprecated',\n    'd': 'directory',\n    'l': 'long',\n  },\n});\n\n//@\n//@ ### ls([options,] [path, ...])\n//@ ### ls([options,] path_array)\n//@\n//@ Available options:\n//@\n//@ + `-R`: recursive\n//@ + `-A`: all files (include files beginning with `.`, except for `.` and `..`)\n//@ + `-L`: follow symlinks\n//@ + `-d`: list directories themselves, not their contents\n//@ + `-l`: list objects representing each file, each with fields containing `ls\n//@         -l` output fields. See\n//@         [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats)\n//@         for more info\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ ls('projs/*.js');\n//@ ls('-R', '/users/me', '/tmp');\n//@ ls('-R', ['/users/me', '/tmp']); // same as above\n//@ ls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}\n//@ ```\n//@\n//@ Returns array of files in the given `path`, or files in\n//@ the current directory if no `path` is  provided.\nfunction _ls(options, paths) {\n  if (options.all_deprecated) {\n    // We won't support the -a option as it's hard to image why it's useful\n    // (it includes '.' and '..' in addition to '.*' files)\n    // For backwards compatibility we'll dump a deprecated message and proceed as before\n    common.log('ls: Option -a is deprecated. Use -A instead');\n    options.all = true;\n  }\n\n  if (!paths) {\n    paths = ['.'];\n  } else {\n    paths = [].slice.call(arguments, 1);\n  }\n\n  var list = [];\n\n  function pushFile(abs, relName, stat) {\n    if (process.platform === 'win32') {\n      relName = relName.replace(/\\\\/g, '/');\n    }\n    if (options.long) {\n      stat = stat || (options.link ? common.statFollowLinks(abs) : common.statNoFollowLinks(abs));\n      list.push(addLsAttributes(relName, stat));\n    } else {\n      // list.push(path.relative(rel || '.', file));\n      list.push(relName);\n    }\n  }\n\n  paths.forEach(function (p) {\n    var stat;\n\n    try {\n      stat = options.link ? common.statFollowLinks(p) : common.statNoFollowLinks(p);\n      // follow links to directories by default\n      if (stat.isSymbolicLink()) {\n        /* istanbul ignore next */\n        // workaround for https://github.com/shelljs/shelljs/issues/795\n        // codecov seems to have a bug that miscalculate this block as uncovered.\n        // but according to nyc report this block does get covered.\n        try {\n          var _stat = common.statFollowLinks(p);\n          if (_stat.isDirectory()) {\n            stat = _stat;\n          }\n        } catch (_) {} // bad symlink, treat it like a file\n      }\n    } catch (e) {\n      common.error('no such file or directory: ' + p, 2, { continue: true });\n      return;\n    }\n\n    // If the stat succeeded\n    if (stat.isDirectory() && !options.directory) {\n      if (options.recursive) {\n        // use glob, because it's simple\n        glob.sync(p + globPatternRecursive, { dot: options.all, follow: options.link })\n          .forEach(function (item) {\n            // Glob pattern returns the directory itself and needs to be filtered out.\n            if (path.relative(p, item)) {\n              pushFile(item, path.relative(p, item));\n            }\n          });\n      } else if (options.all) {\n        // use fs.readdirSync, because it's fast\n        fs.readdirSync(p).forEach(function (item) {\n          pushFile(path.join(p, item), item);\n        });\n      } else {\n        // use fs.readdirSync and then filter out secret files\n        fs.readdirSync(p).forEach(function (item) {\n          if (item[0] !== '.') {\n            pushFile(path.join(p, item), item);\n          }\n        });\n      }\n    } else {\n      pushFile(p, p, stat);\n    }\n  });\n\n  // Add methods, to make this more compatible with ShellStrings\n  return list;\n}\n\nfunction addLsAttributes(pathName, stats) {\n  // Note: this object will contain more information than .toString() returns\n  stats.name = pathName;\n  stats.toString = function () {\n    // Return a string resembling unix's `ls -l` format\n    return [this.mode, this.nlink, this.uid, this.gid, this.size, this.mtime, this.name].join(' ');\n  };\n  return stats;\n}\n\nmodule.exports = _ls;\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAII,oBAAoB,GAAGL,IAAI,CAACM,GAAG,GAAG,IAAI;AAE1CH,MAAM,CAACI,QAAQ,CAAC,IAAI,EAAEC,GAAG,EAAE;EACzBC,UAAU,EAAE;IACV,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,MAAM;IACX,GAAG,EAAE,gBAAgB;IACrB,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE;EACP;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,GAAGA,CAACE,OAAO,EAAEC,KAAK,EAAE;EAC3B,IAAID,OAAO,CAACE,cAAc,EAAE;IAC1B;IACA;IACA;IACAT,MAAM,CAACU,GAAG,CAAC,6CAA6C,CAAC;IACzDH,OAAO,CAACI,GAAG,GAAG,IAAI;EACpB;EAEA,IAAI,CAACH,KAAK,EAAE;IACVA,KAAK,GAAG,CAAC,GAAG,CAAC;EACf,CAAC,MAAM;IACLA,KAAK,GAAG,EAAE,CAACI,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EACrC;EAEA,IAAIC,IAAI,GAAG,EAAE;EAEb,SAASC,QAAQA,CAACC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAE;IACpC,IAAIC,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE;MAChCH,OAAO,GAAGA,OAAO,CAACI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IACvC;IACA,IAAIf,OAAO,CAACgB,IAAI,EAAE;MAChBJ,IAAI,GAAGA,IAAI,KAAKZ,OAAO,CAACiB,IAAI,GAAGxB,MAAM,CAACyB,eAAe,CAACR,GAAG,CAAC,GAAGjB,MAAM,CAAC0B,iBAAiB,CAACT,GAAG,CAAC,CAAC;MAC3FF,IAAI,CAACY,IAAI,CAACC,eAAe,CAACV,OAAO,EAAEC,IAAI,CAAC,CAAC;IAC3C,CAAC,MAAM;MACL;MACAJ,IAAI,CAACY,IAAI,CAACT,OAAO,CAAC;IACpB;EACF;EAEAV,KAAK,CAACqB,OAAO,CAAC,UAAUC,CAAC,EAAE;IACzB,IAAIX,IAAI;IAER,IAAI;MACFA,IAAI,GAAGZ,OAAO,CAACiB,IAAI,GAAGxB,MAAM,CAACyB,eAAe,CAACK,CAAC,CAAC,GAAG9B,MAAM,CAAC0B,iBAAiB,CAACI,CAAC,CAAC;MAC7E;MACA,IAAIX,IAAI,CAACY,cAAc,CAAC,CAAC,EAAE;QACzB;QACA;QACA;QACA;QACA,IAAI;UACF,IAAIC,KAAK,GAAGhC,MAAM,CAACyB,eAAe,CAACK,CAAC,CAAC;UACrC,IAAIE,KAAK,CAACC,WAAW,CAAC,CAAC,EAAE;YACvBd,IAAI,GAAGa,KAAK;UACd;QACF,CAAC,CAAC,OAAOE,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB;IACF,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVnC,MAAM,CAACoC,KAAK,CAAC,6BAA6B,GAAGN,CAAC,EAAE,CAAC,EAAE;QAAEO,QAAQ,EAAE;MAAK,CAAC,CAAC;MACtE;IACF;;IAEA;IACA,IAAIlB,IAAI,CAACc,WAAW,CAAC,CAAC,IAAI,CAAC1B,OAAO,CAAC+B,SAAS,EAAE;MAC5C,IAAI/B,OAAO,CAACgC,SAAS,EAAE;QACrB;QACAtC,IAAI,CAACuC,IAAI,CAACV,CAAC,GAAG5B,oBAAoB,EAAE;UAAEuC,GAAG,EAAElC,OAAO,CAACI,GAAG;UAAE+B,MAAM,EAAEnC,OAAO,CAACiB;QAAK,CAAC,CAAC,CAC5EK,OAAO,CAAC,UAAUc,IAAI,EAAE;UACvB;UACA,IAAI9C,IAAI,CAAC+C,QAAQ,CAACd,CAAC,EAAEa,IAAI,CAAC,EAAE;YAC1B3B,QAAQ,CAAC2B,IAAI,EAAE9C,IAAI,CAAC+C,QAAQ,CAACd,CAAC,EAAEa,IAAI,CAAC,CAAC;UACxC;QACF,CAAC,CAAC;MACN,CAAC,MAAM,IAAIpC,OAAO,CAACI,GAAG,EAAE;QACtB;QACAZ,EAAE,CAAC8C,WAAW,CAACf,CAAC,CAAC,CAACD,OAAO,CAAC,UAAUc,IAAI,EAAE;UACxC3B,QAAQ,CAACnB,IAAI,CAACiD,IAAI,CAAChB,CAAC,EAAEa,IAAI,CAAC,EAAEA,IAAI,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA5C,EAAE,CAAC8C,WAAW,CAACf,CAAC,CAAC,CAACD,OAAO,CAAC,UAAUc,IAAI,EAAE;UACxC,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACnB3B,QAAQ,CAACnB,IAAI,CAACiD,IAAI,CAAChB,CAAC,EAAEa,IAAI,CAAC,EAAEA,IAAI,CAAC;UACpC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,MAAM;MACL3B,QAAQ,CAACc,CAAC,EAAEA,CAAC,EAAEX,IAAI,CAAC;IACtB;EACF,CAAC,CAAC;;EAEF;EACA,OAAOJ,IAAI;AACb;AAEA,SAASa,eAAeA,CAACmB,QAAQ,EAAEC,KAAK,EAAE;EACxC;EACAA,KAAK,CAACC,IAAI,GAAGF,QAAQ;EACrBC,KAAK,CAACE,QAAQ,GAAG,YAAY;IAC3B;IACA,OAAO,CAAC,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACP,IAAI,CAAC,CAACH,IAAI,CAAC,GAAG,CAAC;EAChG,CAAC;EACD,OAAOE,KAAK;AACd;AAEAS,MAAM,CAACC,OAAO,GAAGrD,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}