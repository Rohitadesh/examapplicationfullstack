{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\ncommon.register('to', _to, {\n  pipeOnly: true,\n  wrapOutput: false\n});\n\n//@\n//@ ### ShellString.prototype.to(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').to('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirection operator `>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.). _Like Unix\n//@ redirections, `to()` will overwrite any existing file!_\nfunction _to(options, file) {\n  if (!file) common.error('wrong arguments');\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n  try {\n    fs.writeFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not write to file (code ' + e.code + '): ' + file, {\n      continue: true\n    });\n  }\n}\nmodule.exports = _to;","map":{"version":3,"names":["common","require","fs","path","register","_to","pipeOnly","wrapOutput","options","file","error","existsSync","dirname","writeFileSync","stdout","toString","e","code","continue","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/to.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\ncommon.register('to', _to, {\n  pipeOnly: true,\n  wrapOutput: false,\n});\n\n//@\n//@ ### ShellString.prototype.to(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').to('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirection operator `>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.). _Like Unix\n//@ redirections, `to()` will overwrite any existing file!_\nfunction _to(options, file) {\n  if (!file) common.error('wrong arguments');\n\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n\n  try {\n    fs.writeFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not write to file (code ' + e.code + '): ' + file, { continue: true });\n  }\n}\nmodule.exports = _to;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE1BD,MAAM,CAACI,QAAQ,CAAC,IAAI,EAAEC,GAAG,EAAE;EACzBC,QAAQ,EAAE,IAAI;EACdC,UAAU,EAAE;AACd,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,GAAGA,CAACG,OAAO,EAAEC,IAAI,EAAE;EAC1B,IAAI,CAACA,IAAI,EAAET,MAAM,CAACU,KAAK,CAAC,iBAAiB,CAAC;EAE1C,IAAI,CAACR,EAAE,CAACS,UAAU,CAACR,IAAI,CAACS,OAAO,CAACH,IAAI,CAAC,CAAC,EAAE;IACtCT,MAAM,CAACU,KAAK,CAAC,6BAA6B,GAAGP,IAAI,CAACS,OAAO,CAACH,IAAI,CAAC,CAAC;EAClE;EAEA,IAAI;IACFP,EAAE,CAACW,aAAa,CAACJ,IAAI,EAAE,IAAI,CAACK,MAAM,IAAI,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC;IAC9D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACAhB,MAAM,CAACU,KAAK,CAAC,gCAAgC,GAAGM,CAAC,CAACC,IAAI,GAAG,KAAK,GAAGR,IAAI,EAAE;MAAES,QAAQ,EAAE;IAAK,CAAC,CAAC;EAC5F;AACF;AACAC,MAAM,CAACC,OAAO,GAAGf,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}