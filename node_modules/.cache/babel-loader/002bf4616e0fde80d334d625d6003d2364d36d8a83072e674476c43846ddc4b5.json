{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all'\n  }\n});\n\n// XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh';\n\n// For earlier versions of NodeJS that doesn't have a list of constants (< v6)\nvar FILE_EXECUTABLE_MODE = 1;\nfunction isWindowsPlatform() {\n  return process.platform === 'win32';\n}\n\n// Cross-platform method for splitting environment `PATH` variables\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n}\n\n// Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n/* istanbul ignore next */\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !common.statFollowLinks(pathName).isDirectory() && (isWindowsPlatform() || isExecutable(pathName));\n}\n\n//@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to `command`.\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n  var queryMatches = [];\n\n  // No relative/absolute paths provided?\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    }\n\n    // Search for command in PATH\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n      var attempt = path.resolve(pathArray[k], cmd);\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n      if (match && pathExtArray.indexOf(match[0]) >= 0) {\n        // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else {\n        // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) {\n    // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n  return options.all ? [] : null;\n}\nmodule.exports = _which;","map":{"version":3,"names":["common","require","fs","path","register","_which","allowGlobbing","cmdOptions","XP_DEFAULT_PATHEXT","FILE_EXECUTABLE_MODE","isWindowsPlatform","process","platform","splitPath","p","split","delimiter","isExecutable","pathName","accessSync","err","checkPath","existsSync","statFollowLinks","isDirectory","options","cmd","error","isWindows","pathArray","env","PATH","queryMatches","indexOf","pathExtArray","pathExtEnv","PATHEXT","toUpperCase","k","length","all","attempt","resolve","match","push","i","ext","newAttempt","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/which.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all',\n  },\n});\n\n// XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh';\n\n// For earlier versions of NodeJS that doesn't have a list of constants (< v6)\nvar FILE_EXECUTABLE_MODE = 1;\n\nfunction isWindowsPlatform() {\n  return process.platform === 'win32';\n}\n\n// Cross-platform method for splitting environment `PATH` variables\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n}\n\n// Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n/* istanbul ignore next */\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !common.statFollowLinks(pathName).isDirectory()\n    && (isWindowsPlatform() || isExecutable(pathName));\n}\n\n//@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to `command`.\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n\n  var queryMatches = [];\n\n  // No relative/absolute paths provided?\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    }\n\n    // Search for command in PATH\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n      if (match && pathExtArray.indexOf(match[0]) >= 0) { // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else { // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) { // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n  return options.all ? [] : null;\n}\nmodule.exports = _which;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}