{"ast":null,"code":"'use strict';\n\nconst net = require('net');\nconst address = require('address');\nconst debug = require('debug')('detect-port');\nmodule.exports = (port, callback) => {\n  let hostname = '';\n  if (typeof port === 'object' && port) {\n    hostname = port.hostname;\n    callback = port.callback;\n    port = port.port;\n  } else {\n    if (typeof port === 'function') {\n      callback = port;\n      port = null;\n    }\n  }\n  port = parseInt(port) || 0;\n  let maxPort = port + 10;\n  if (maxPort > 65535) {\n    maxPort = 65535;\n  }\n  debug('detect free port between [%s, %s)', port, maxPort);\n  if (typeof callback === 'function') {\n    return tryListen(port, maxPort, hostname, callback);\n  }\n  // promise\n  return new Promise(resolve => {\n    tryListen(port, maxPort, hostname, (_, realPort) => {\n      resolve(realPort);\n    });\n  });\n};\nfunction tryListen(port, maxPort, hostname, callback) {\n  function handleError() {\n    port++;\n    if (port >= maxPort) {\n      debug('port: %s >= maxPort: %s, give up and use random port', port, maxPort);\n      port = 0;\n      maxPort = 0;\n    }\n    tryListen(port, maxPort, hostname, callback);\n  }\n\n  // use user hostname\n  if (hostname) {\n    listen(port, hostname, (err, realPort) => {\n      if (err) {\n        if (err.code === 'EADDRNOTAVAIL') {\n          return callback(new Error('the ip that is not unknown on the machine'));\n        }\n        return handleError();\n      }\n      callback(null, realPort);\n    });\n  } else {\n    // 1. check null\n    listen(port, null, (err, realPort) => {\n      // ignore random listening\n      if (port === 0) {\n        return callback(err, realPort);\n      }\n      if (err) {\n        return handleError(err);\n      }\n\n      // 2. check 0.0.0.0\n      listen(port, '0.0.0.0', err => {\n        if (err) {\n          return handleError(err);\n        }\n\n        // 3. check localhost\n        listen(port, 'localhost', err => {\n          // if localhost refer to the ip that is not unkonwn on the machine, you will see the error EADDRNOTAVAIL\n          // https://stackoverflow.com/questions/10809740/listen-eaddrnotavail-error-in-node-js\n          if (err && err.code !== 'EADDRNOTAVAIL') {\n            return handleError(err);\n          }\n\n          // 4. check current ip\n          listen(port, address.ip(), (err, realPort) => {\n            if (err) {\n              return handleError(err);\n            }\n            callback(null, realPort);\n          });\n        });\n      });\n    });\n  }\n}\nfunction listen(port, hostname, callback) {\n  const server = new net.Server();\n  server.on('error', err => {\n    debug('listen %s:%s error: %s', hostname, port, err);\n    server.close();\n    if (err.code === 'ENOTFOUND') {\n      debug('ignore dns ENOTFOUND error, get free %s:%s', hostname, port);\n      return callback(null, port);\n    }\n    return callback(err);\n  });\n  server.listen(port, hostname, () => {\n    port = server.address().port;\n    server.close();\n    debug('get free %s:%s', hostname, port);\n    return callback(null, port);\n  });\n}","map":{"version":3,"names":["net","require","address","debug","module","exports","port","callback","hostname","parseInt","maxPort","tryListen","Promise","resolve","_","realPort","handleError","listen","err","code","Error","ip","server","Server","on","close"],"sources":["/home/lenovo/node_modules/detect-port/lib/detect-port.js"],"sourcesContent":["'use strict';\n\nconst net = require('net');\nconst address = require('address');\nconst debug = require('debug')('detect-port');\n\nmodule.exports = (port, callback) => {\n  let hostname = '';\n\n  if (typeof port === 'object' && port) {\n    hostname = port.hostname;\n    callback = port.callback;\n    port = port.port;\n  } else {\n    if (typeof port === 'function') {\n      callback = port;\n      port = null;\n    }\n  }\n\n  port = parseInt(port) || 0;\n  let maxPort = port + 10;\n  if (maxPort > 65535) {\n    maxPort = 65535;\n  }\n  debug('detect free port between [%s, %s)', port, maxPort);\n  if (typeof callback === 'function') {\n    return tryListen(port, maxPort, hostname, callback);\n  }\n  // promise\n  return new Promise(resolve => {\n    tryListen(port, maxPort, hostname, (_, realPort) => {\n      resolve(realPort);\n    });\n  });\n};\n\nfunction tryListen(port, maxPort, hostname, callback) {\n  function handleError() {\n    port++;\n    if (port >= maxPort) {\n      debug('port: %s >= maxPort: %s, give up and use random port', port, maxPort);\n      port = 0;\n      maxPort = 0;\n    }\n    tryListen(port, maxPort, hostname, callback);\n  }\n\n  // use user hostname\n  if (hostname) {\n    listen(port, hostname, (err, realPort) => {\n      if (err) {\n        if (err.code === 'EADDRNOTAVAIL') {\n          return callback(new Error('the ip that is not unknown on the machine'));\n        }\n        return handleError();\n      }\n\n      callback(null, realPort);\n    });\n  } else {\n    // 1. check null\n    listen(port, null, (err, realPort) => {\n      // ignore random listening\n      if (port === 0) {\n        return callback(err, realPort);\n      }\n\n      if (err) {\n        return handleError(err);\n      }\n\n      // 2. check 0.0.0.0\n      listen(port, '0.0.0.0', err => {\n        if (err) {\n          return handleError(err);\n        }\n\n        // 3. check localhost\n        listen(port, 'localhost', err => {\n          // if localhost refer to the ip that is not unkonwn on the machine, you will see the error EADDRNOTAVAIL\n          // https://stackoverflow.com/questions/10809740/listen-eaddrnotavail-error-in-node-js\n          if (err && err.code !== 'EADDRNOTAVAIL') {\n            return handleError(err);\n          }\n\n          // 4. check current ip\n          listen(port, address.ip(), (err, realPort) => {\n            if (err) {\n              return handleError(err);\n            }\n\n            callback(null, realPort);\n          });\n        });\n      });\n    });\n  }\n}\n\nfunction listen(port, hostname, callback) {\n  const server = new net.Server();\n\n  server.on('error', err => {\n    debug('listen %s:%s error: %s', hostname, port, err);\n    server.close();\n    if (err.code === 'ENOTFOUND') {\n      debug('ignore dns ENOTFOUND error, get free %s:%s', hostname, port);\n      return callback(null, port);\n    }\n    return callback(err);\n  });\n\n  server.listen(port, hostname, () => {\n    port = server.address().port;\n    server.close();\n    debug('get free %s:%s', hostname, port);\n    return callback(null, port);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}