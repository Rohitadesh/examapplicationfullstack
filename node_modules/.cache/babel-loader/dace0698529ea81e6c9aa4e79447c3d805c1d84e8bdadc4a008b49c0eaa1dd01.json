{"ast":null,"code":"var format = require('util').format;\nvar common = require('./common');\ncommon.register('echo', _echo, {\n  allowGlobbing: false\n});\n\n//@\n//@ ### echo([options,] string [, string ...])\n//@\n//@ Available options:\n//@\n//@ + `-e`: interpret backslash escapes (default)\n//@ + `-n`: remove trailing newline from output\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo('hello world');\n//@ var str = echo('hello world');\n//@ echo('-n', 'no newline at end');\n//@ ```\n//@\n//@ Prints `string` to stdout, and returns string with additional utility methods\n//@ like `.to()`.\nfunction _echo(opts) {\n  // allow strings starting with '-', see issue #20\n  var messages = [].slice.call(arguments, opts ? 0 : 1);\n  var options = {};\n\n  // If the first argument starts with '-', parse it as options string.\n  // If parseOptions throws, it wasn't an options string.\n  try {\n    options = common.parseOptions(messages[0], {\n      'e': 'escapes',\n      'n': 'no_newline'\n    }, {\n      silent: true\n    });\n\n    // Allow null to be echoed\n    if (messages[0]) {\n      messages.shift();\n    }\n  } catch (_) {\n    // Clear out error if an error occurred\n    common.state.error = null;\n  }\n  var output = format.apply(null, messages);\n\n  // Add newline if -n is not passed.\n  if (!options.no_newline) {\n    output += '\\n';\n  }\n  process.stdout.write(output);\n  return output;\n}\nmodule.exports = _echo;","map":{"version":3,"names":["format","require","common","register","_echo","allowGlobbing","opts","messages","slice","call","arguments","options","parseOptions","silent","shift","_","state","error","output","apply","no_newline","process","stdout","write","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/echo.js"],"sourcesContent":["var format = require('util').format;\n\nvar common = require('./common');\n\ncommon.register('echo', _echo, {\n  allowGlobbing: false,\n});\n\n//@\n//@ ### echo([options,] string [, string ...])\n//@\n//@ Available options:\n//@\n//@ + `-e`: interpret backslash escapes (default)\n//@ + `-n`: remove trailing newline from output\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo('hello world');\n//@ var str = echo('hello world');\n//@ echo('-n', 'no newline at end');\n//@ ```\n//@\n//@ Prints `string` to stdout, and returns string with additional utility methods\n//@ like `.to()`.\nfunction _echo(opts) {\n  // allow strings starting with '-', see issue #20\n  var messages = [].slice.call(arguments, opts ? 0 : 1);\n  var options = {};\n\n  // If the first argument starts with '-', parse it as options string.\n  // If parseOptions throws, it wasn't an options string.\n  try {\n    options = common.parseOptions(messages[0], {\n      'e': 'escapes',\n      'n': 'no_newline',\n    }, {\n      silent: true,\n    });\n\n    // Allow null to be echoed\n    if (messages[0]) {\n      messages.shift();\n    }\n  } catch (_) {\n    // Clear out error if an error occurred\n    common.state.error = null;\n  }\n\n  var output = format.apply(null, messages);\n\n  // Add newline if -n is not passed.\n  if (!options.no_newline) {\n    output += '\\n';\n  }\n\n  process.stdout.write(output);\n\n  return output;\n}\n\nmodule.exports = _echo;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC,CAACD,MAAM;AAEnC,IAAIE,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAEhCC,MAAM,CAACC,QAAQ,CAAC,MAAM,EAAEC,KAAK,EAAE;EAC7BC,aAAa,EAAE;AACjB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,KAAKA,CAACE,IAAI,EAAE;EACnB;EACA,IAAIC,QAAQ,GAAG,EAAE,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,EAAEJ,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;EACrD,IAAIK,OAAO,GAAG,CAAC,CAAC;;EAEhB;EACA;EACA,IAAI;IACFA,OAAO,GAAGT,MAAM,CAACU,YAAY,CAACL,QAAQ,CAAC,CAAC,CAAC,EAAE;MACzC,GAAG,EAAE,SAAS;MACd,GAAG,EAAE;IACP,CAAC,EAAE;MACDM,MAAM,EAAE;IACV,CAAC,CAAC;;IAEF;IACA,IAAIN,QAAQ,CAAC,CAAC,CAAC,EAAE;MACfA,QAAQ,CAACO,KAAK,CAAC,CAAC;IAClB;EACF,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACAb,MAAM,CAACc,KAAK,CAACC,KAAK,GAAG,IAAI;EAC3B;EAEA,IAAIC,MAAM,GAAGlB,MAAM,CAACmB,KAAK,CAAC,IAAI,EAAEZ,QAAQ,CAAC;;EAEzC;EACA,IAAI,CAACI,OAAO,CAACS,UAAU,EAAE;IACvBF,MAAM,IAAI,IAAI;EAChB;EAEAG,OAAO,CAACC,MAAM,CAACC,KAAK,CAACL,MAAM,CAAC;EAE5B,OAAOA,MAAM;AACf;AAEAM,MAAM,CAACC,OAAO,GAAGrB,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}