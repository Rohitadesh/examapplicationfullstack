{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\ncommon.register('sed', _sed, {\n  globStart: 3,\n  // don't glob-expand regexes\n  canReceivePipe: true,\n  cmdOptions: {\n    'i': 'inplace'\n  }\n});\n\n//@\n//@ ### sed([options,] search_regex, replacement, file [, file ...])\n//@ ### sed([options,] search_regex, replacement, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-i`: Replace contents of `file` in-place. _Note that no backups will be created!_\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\n//@ sed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n//@ ```\n//@\n//@ Reads an input string from `file`s, and performs a JavaScript `replace()` on the input\n//@ using the given `search_regex` and `replacement` string or function. Returns the new string after replacement.\n//@\n//@ Note:\n//@\n//@ Like unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified\n//@ using the `$n` syntax:\n//@\n//@ ```javascript\n//@ sed(/(\\w+)\\s(\\w+)/, '$2, $1', 'file.txt');\n//@ ```\nfunction _sed(options, regex, replacement, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n  if (typeof replacement !== 'string' && typeof replacement !== 'function') {\n    if (typeof replacement === 'number') {\n      replacement = replacement.toString(); // fallback\n    } else {\n      common.error('invalid replacement string');\n    }\n  }\n\n  // Convert all search strings to RegExp\n  if (typeof regex === 'string') {\n    regex = RegExp(regex);\n  }\n  if (!files && !pipe) {\n    common.error('no files given');\n  }\n  files = [].slice.call(arguments, 3);\n  if (pipe) {\n    files.unshift('-');\n  }\n  var sed = [];\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, {\n        continue: true\n      });\n      return;\n    }\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    var lines = contents.split('\\n');\n    var result = lines.map(function (line) {\n      return line.replace(regex, replacement);\n    }).join('\\n');\n    sed.push(result);\n    if (options.inplace) {\n      fs.writeFileSync(file, result, 'utf8');\n    }\n  });\n  return sed.join('\\n');\n}\nmodule.exports = _sed;","map":{"version":3,"names":["common","require","fs","register","_sed","globStart","canReceivePipe","cmdOptions","options","regex","replacement","files","pipe","readFromPipe","toString","error","RegExp","slice","call","arguments","unshift","sed","forEach","file","existsSync","continue","contents","readFileSync","lines","split","result","map","line","replace","join","push","inplace","writeFileSync","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/sed.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('sed', _sed, {\n  globStart: 3, // don't glob-expand regexes\n  canReceivePipe: true,\n  cmdOptions: {\n    'i': 'inplace',\n  },\n});\n\n//@\n//@ ### sed([options,] search_regex, replacement, file [, file ...])\n//@ ### sed([options,] search_regex, replacement, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-i`: Replace contents of `file` in-place. _Note that no backups will be created!_\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\n//@ sed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n//@ ```\n//@\n//@ Reads an input string from `file`s, and performs a JavaScript `replace()` on the input\n//@ using the given `search_regex` and `replacement` string or function. Returns the new string after replacement.\n//@\n//@ Note:\n//@\n//@ Like unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified\n//@ using the `$n` syntax:\n//@\n//@ ```javascript\n//@ sed(/(\\w+)\\s(\\w+)/, '$2, $1', 'file.txt');\n//@ ```\nfunction _sed(options, regex, replacement, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (typeof replacement !== 'string' && typeof replacement !== 'function') {\n    if (typeof replacement === 'number') {\n      replacement = replacement.toString(); // fallback\n    } else {\n      common.error('invalid replacement string');\n    }\n  }\n\n  // Convert all search strings to RegExp\n  if (typeof regex === 'string') {\n    regex = RegExp(regex);\n  }\n\n  if (!files && !pipe) {\n    common.error('no files given');\n  }\n\n  files = [].slice.call(arguments, 3);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var sed = [];\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, { continue: true });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    var lines = contents.split('\\n');\n    var result = lines.map(function (line) {\n      return line.replace(regex, replacement);\n    }).join('\\n');\n\n    sed.push(result);\n\n    if (options.inplace) {\n      fs.writeFileSync(file, result, 'utf8');\n    }\n  });\n\n  return sed.join('\\n');\n}\nmodule.exports = _sed;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AAEtBD,MAAM,CAACG,QAAQ,CAAC,KAAK,EAAEC,IAAI,EAAE;EAC3BC,SAAS,EAAE,CAAC;EAAE;EACdC,cAAc,EAAE,IAAI;EACpBC,UAAU,EAAE;IACV,GAAG,EAAE;EACP;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,IAAIA,CAACI,OAAO,EAAEC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAE;EAChD;EACA,IAAIC,IAAI,GAAGZ,MAAM,CAACa,YAAY,CAAC,CAAC;EAEhC,IAAI,OAAOH,WAAW,KAAK,QAAQ,IAAI,OAAOA,WAAW,KAAK,UAAU,EAAE;IACxE,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACnCA,WAAW,GAAGA,WAAW,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,MAAM;MACLd,MAAM,CAACe,KAAK,CAAC,4BAA4B,CAAC;IAC5C;EACF;;EAEA;EACA,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;IAC7BA,KAAK,GAAGO,MAAM,CAACP,KAAK,CAAC;EACvB;EAEA,IAAI,CAACE,KAAK,IAAI,CAACC,IAAI,EAAE;IACnBZ,MAAM,CAACe,KAAK,CAAC,gBAAgB,CAAC;EAChC;EAEAJ,KAAK,GAAG,EAAE,CAACM,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EAEnC,IAAIP,IAAI,EAAE;IACRD,KAAK,CAACS,OAAO,CAAC,GAAG,CAAC;EACpB;EAEA,IAAIC,GAAG,GAAG,EAAE;EACZV,KAAK,CAACW,OAAO,CAAC,UAAUC,IAAI,EAAE;IAC5B,IAAI,CAACrB,EAAE,CAACsB,UAAU,CAACD,IAAI,CAAC,IAAIA,IAAI,KAAK,GAAG,EAAE;MACxCvB,MAAM,CAACe,KAAK,CAAC,6BAA6B,GAAGQ,IAAI,EAAE,CAAC,EAAE;QAAEE,QAAQ,EAAE;MAAK,CAAC,CAAC;MACzE;IACF;IAEA,IAAIC,QAAQ,GAAGH,IAAI,KAAK,GAAG,GAAGX,IAAI,GAAGV,EAAE,CAACyB,YAAY,CAACJ,IAAI,EAAE,MAAM,CAAC;IAClE,IAAIK,KAAK,GAAGF,QAAQ,CAACG,KAAK,CAAC,IAAI,CAAC;IAChC,IAAIC,MAAM,GAAGF,KAAK,CAACG,GAAG,CAAC,UAAUC,IAAI,EAAE;MACrC,OAAOA,IAAI,CAACC,OAAO,CAACxB,KAAK,EAAEC,WAAW,CAAC;IACzC,CAAC,CAAC,CAACwB,IAAI,CAAC,IAAI,CAAC;IAEbb,GAAG,CAACc,IAAI,CAACL,MAAM,CAAC;IAEhB,IAAItB,OAAO,CAAC4B,OAAO,EAAE;MACnBlC,EAAE,CAACmC,aAAa,CAACd,IAAI,EAAEO,MAAM,EAAE,MAAM,CAAC;IACxC;EACF,CAAC,CAAC;EAEF,OAAOT,GAAG,CAACa,IAAI,CAAC,IAAI,CAAC;AACvB;AACAI,MAAM,CAACC,OAAO,GAAGnC,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}