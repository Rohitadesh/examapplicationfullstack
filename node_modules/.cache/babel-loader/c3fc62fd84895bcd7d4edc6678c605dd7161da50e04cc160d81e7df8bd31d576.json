{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\nvar PERMS = function (base) {\n  return {\n    OTHER_EXEC: base.EXEC,\n    OTHER_WRITE: base.WRITE,\n    OTHER_READ: base.READ,\n    GROUP_EXEC: base.EXEC << 3,\n    GROUP_WRITE: base.WRITE << 3,\n    GROUP_READ: base.READ << 3,\n    OWNER_EXEC: base.EXEC << 6,\n    OWNER_WRITE: base.WRITE << 6,\n    OWNER_READ: base.READ << 6,\n    // Literal octal numbers are apparently not allowed in \"strict\" javascript.\n    STICKY: parseInt('01000', 8),\n    SETGID: parseInt('02000', 8),\n    SETUID: parseInt('04000', 8),\n    TYPE_MASK: parseInt('0770000', 8)\n  };\n}({\n  EXEC: 1,\n  WRITE: 2,\n  READ: 4\n});\ncommon.register('chmod', _chmod, {});\n\n//@\n//@ ### chmod([options,] octal_mode || octal_string, file)\n//@ ### chmod([options,] symbolic_mode, file)\n//@\n//@ Available options:\n//@\n//@ + `-v`: output a diagnostic for every file processed//@\n//@ + `-c`: like verbose, but report only when a change is made//@\n//@ + `-R`: change files and directories recursively//@\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ chmod(755, '/Users/brandon');\n//@ chmod('755', '/Users/brandon'); // same as above\n//@ chmod('u+x', '/Users/brandon');\n//@ chmod('-R', 'a-w', '/Users/brandon');\n//@ ```\n//@\n//@ Alters the permissions of a file or directory by either specifying the\n//@ absolute permissions in octal form or expressing the changes in symbols.\n//@ This command tries to mimic the POSIX behavior as much as possible.\n//@ Notable exceptions:\n//@\n//@ + In symbolic modes, `a-r` and `-r` are identical.  No consideration is\n//@   given to the `umask`.\n//@ + There is no \"quiet\" option, since default behavior is to run silent.\nfunction _chmod(options, mode, filePattern) {\n  if (!filePattern) {\n    if (options.length > 0 && options.charAt(0) === '-') {\n      // Special case where the specified file permissions started with - to subtract perms, which\n      // get picked up by the option parser as command flags.\n      // If we are down by one argument and options starts with -, shift everything over.\n      [].unshift.call(arguments, '');\n    } else {\n      common.error('You must specify a file.');\n    }\n  }\n  options = common.parseOptions(options, {\n    'R': 'recursive',\n    'c': 'changes',\n    'v': 'verbose'\n  });\n  filePattern = [].slice.call(arguments, 2);\n  var files;\n\n  // TODO: replace this with a call to common.expand()\n  if (options.recursive) {\n    files = [];\n    filePattern.forEach(function addFile(expandedFile) {\n      var stat = common.statNoFollowLinks(expandedFile);\n      if (!stat.isSymbolicLink()) {\n        files.push(expandedFile);\n        if (stat.isDirectory()) {\n          // intentionally does not follow symlinks.\n          fs.readdirSync(expandedFile).forEach(function (child) {\n            addFile(expandedFile + '/' + child);\n          });\n        }\n      }\n    });\n  } else {\n    files = filePattern;\n  }\n  files.forEach(function innerChmod(file) {\n    file = path.resolve(file);\n    if (!fs.existsSync(file)) {\n      common.error('File not found: ' + file);\n    }\n\n    // When recursing, don't follow symlinks.\n    if (options.recursive && common.statNoFollowLinks(file).isSymbolicLink()) {\n      return;\n    }\n    var stat = common.statFollowLinks(file);\n    var isDir = stat.isDirectory();\n    var perms = stat.mode;\n    var type = perms & PERMS.TYPE_MASK;\n    var newPerms = perms;\n    if (isNaN(parseInt(mode, 8))) {\n      // parse options\n      mode.split(',').forEach(function (symbolicMode) {\n        var pattern = /([ugoa]*)([=\\+-])([rwxXst]*)/i;\n        var matches = pattern.exec(symbolicMode);\n        if (matches) {\n          var applyTo = matches[1];\n          var operator = matches[2];\n          var change = matches[3];\n          var changeOwner = applyTo.indexOf('u') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeGroup = applyTo.indexOf('g') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeOther = applyTo.indexOf('o') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeRead = change.indexOf('r') !== -1;\n          var changeWrite = change.indexOf('w') !== -1;\n          var changeExec = change.indexOf('x') !== -1;\n          var changeExecDir = change.indexOf('X') !== -1;\n          var changeSticky = change.indexOf('t') !== -1;\n          var changeSetuid = change.indexOf('s') !== -1;\n          if (changeExecDir && isDir) {\n            changeExec = true;\n          }\n          var mask = 0;\n          if (changeOwner) {\n            mask |= (changeRead ? PERMS.OWNER_READ : 0) + (changeWrite ? PERMS.OWNER_WRITE : 0) + (changeExec ? PERMS.OWNER_EXEC : 0) + (changeSetuid ? PERMS.SETUID : 0);\n          }\n          if (changeGroup) {\n            mask |= (changeRead ? PERMS.GROUP_READ : 0) + (changeWrite ? PERMS.GROUP_WRITE : 0) + (changeExec ? PERMS.GROUP_EXEC : 0) + (changeSetuid ? PERMS.SETGID : 0);\n          }\n          if (changeOther) {\n            mask |= (changeRead ? PERMS.OTHER_READ : 0) + (changeWrite ? PERMS.OTHER_WRITE : 0) + (changeExec ? PERMS.OTHER_EXEC : 0);\n          }\n\n          // Sticky bit is special - it's not tied to user, group or other.\n          if (changeSticky) {\n            mask |= PERMS.STICKY;\n          }\n          switch (operator) {\n            case '+':\n              newPerms |= mask;\n              break;\n            case '-':\n              newPerms &= ~mask;\n              break;\n            case '=':\n              newPerms = type + mask;\n\n              // According to POSIX, when using = to explicitly set the\n              // permissions, setuid and setgid can never be cleared.\n              if (common.statFollowLinks(file).isDirectory()) {\n                newPerms |= PERMS.SETUID + PERMS.SETGID & perms;\n              }\n              break;\n            default:\n              common.error('Could not recognize operator: `' + operator + '`');\n          }\n          if (options.verbose) {\n            console.log(file + ' -> ' + newPerms.toString(8));\n          }\n          if (perms !== newPerms) {\n            if (!options.verbose && options.changes) {\n              console.log(file + ' -> ' + newPerms.toString(8));\n            }\n            fs.chmodSync(file, newPerms);\n            perms = newPerms; // for the next round of changes!\n          }\n        } else {\n          common.error('Invalid symbolic mode change: ' + symbolicMode);\n        }\n      });\n    } else {\n      // they gave us a full number\n      newPerms = type + parseInt(mode, 8);\n\n      // POSIX rules are that setuid and setgid can only be added using numeric\n      // form, but not cleared.\n      if (common.statFollowLinks(file).isDirectory()) {\n        newPerms |= PERMS.SETUID + PERMS.SETGID & perms;\n      }\n      fs.chmodSync(file, newPerms);\n    }\n  });\n  return '';\n}\nmodule.exports = _chmod;","map":{"version":3,"names":["common","require","fs","path","PERMS","base","OTHER_EXEC","EXEC","OTHER_WRITE","WRITE","OTHER_READ","READ","GROUP_EXEC","GROUP_WRITE","GROUP_READ","OWNER_EXEC","OWNER_WRITE","OWNER_READ","STICKY","parseInt","SETGID","SETUID","TYPE_MASK","register","_chmod","options","mode","filePattern","length","charAt","unshift","call","arguments","error","parseOptions","slice","files","recursive","forEach","addFile","expandedFile","stat","statNoFollowLinks","isSymbolicLink","push","isDirectory","readdirSync","child","innerChmod","file","resolve","existsSync","statFollowLinks","isDir","perms","type","newPerms","isNaN","split","symbolicMode","pattern","matches","exec","applyTo","operator","change","changeOwner","indexOf","changeGroup","changeOther","changeRead","changeWrite","changeExec","changeExecDir","changeSticky","changeSetuid","mask","verbose","console","log","toString","changes","chmodSync","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/chmod.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\nvar path = require('path');\n\nvar PERMS = (function (base) {\n  return {\n    OTHER_EXEC: base.EXEC,\n    OTHER_WRITE: base.WRITE,\n    OTHER_READ: base.READ,\n\n    GROUP_EXEC: base.EXEC << 3,\n    GROUP_WRITE: base.WRITE << 3,\n    GROUP_READ: base.READ << 3,\n\n    OWNER_EXEC: base.EXEC << 6,\n    OWNER_WRITE: base.WRITE << 6,\n    OWNER_READ: base.READ << 6,\n\n    // Literal octal numbers are apparently not allowed in \"strict\" javascript.\n    STICKY: parseInt('01000', 8),\n    SETGID: parseInt('02000', 8),\n    SETUID: parseInt('04000', 8),\n\n    TYPE_MASK: parseInt('0770000', 8),\n  };\n}({\n  EXEC: 1,\n  WRITE: 2,\n  READ: 4,\n}));\n\ncommon.register('chmod', _chmod, {\n});\n\n//@\n//@ ### chmod([options,] octal_mode || octal_string, file)\n//@ ### chmod([options,] symbolic_mode, file)\n//@\n//@ Available options:\n//@\n//@ + `-v`: output a diagnostic for every file processed//@\n//@ + `-c`: like verbose, but report only when a change is made//@\n//@ + `-R`: change files and directories recursively//@\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ chmod(755, '/Users/brandon');\n//@ chmod('755', '/Users/brandon'); // same as above\n//@ chmod('u+x', '/Users/brandon');\n//@ chmod('-R', 'a-w', '/Users/brandon');\n//@ ```\n//@\n//@ Alters the permissions of a file or directory by either specifying the\n//@ absolute permissions in octal form or expressing the changes in symbols.\n//@ This command tries to mimic the POSIX behavior as much as possible.\n//@ Notable exceptions:\n//@\n//@ + In symbolic modes, `a-r` and `-r` are identical.  No consideration is\n//@   given to the `umask`.\n//@ + There is no \"quiet\" option, since default behavior is to run silent.\nfunction _chmod(options, mode, filePattern) {\n  if (!filePattern) {\n    if (options.length > 0 && options.charAt(0) === '-') {\n      // Special case where the specified file permissions started with - to subtract perms, which\n      // get picked up by the option parser as command flags.\n      // If we are down by one argument and options starts with -, shift everything over.\n      [].unshift.call(arguments, '');\n    } else {\n      common.error('You must specify a file.');\n    }\n  }\n\n  options = common.parseOptions(options, {\n    'R': 'recursive',\n    'c': 'changes',\n    'v': 'verbose',\n  });\n\n  filePattern = [].slice.call(arguments, 2);\n\n  var files;\n\n  // TODO: replace this with a call to common.expand()\n  if (options.recursive) {\n    files = [];\n    filePattern.forEach(function addFile(expandedFile) {\n      var stat = common.statNoFollowLinks(expandedFile);\n\n      if (!stat.isSymbolicLink()) {\n        files.push(expandedFile);\n\n        if (stat.isDirectory()) {  // intentionally does not follow symlinks.\n          fs.readdirSync(expandedFile).forEach(function (child) {\n            addFile(expandedFile + '/' + child);\n          });\n        }\n      }\n    });\n  } else {\n    files = filePattern;\n  }\n\n  files.forEach(function innerChmod(file) {\n    file = path.resolve(file);\n    if (!fs.existsSync(file)) {\n      common.error('File not found: ' + file);\n    }\n\n    // When recursing, don't follow symlinks.\n    if (options.recursive && common.statNoFollowLinks(file).isSymbolicLink()) {\n      return;\n    }\n\n    var stat = common.statFollowLinks(file);\n    var isDir = stat.isDirectory();\n    var perms = stat.mode;\n    var type = perms & PERMS.TYPE_MASK;\n\n    var newPerms = perms;\n\n    if (isNaN(parseInt(mode, 8))) {\n      // parse options\n      mode.split(',').forEach(function (symbolicMode) {\n        var pattern = /([ugoa]*)([=\\+-])([rwxXst]*)/i;\n        var matches = pattern.exec(symbolicMode);\n\n        if (matches) {\n          var applyTo = matches[1];\n          var operator = matches[2];\n          var change = matches[3];\n\n          var changeOwner = applyTo.indexOf('u') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeGroup = applyTo.indexOf('g') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeOther = applyTo.indexOf('o') !== -1 || applyTo === 'a' || applyTo === '';\n\n          var changeRead = change.indexOf('r') !== -1;\n          var changeWrite = change.indexOf('w') !== -1;\n          var changeExec = change.indexOf('x') !== -1;\n          var changeExecDir = change.indexOf('X') !== -1;\n          var changeSticky = change.indexOf('t') !== -1;\n          var changeSetuid = change.indexOf('s') !== -1;\n\n          if (changeExecDir && isDir) {\n            changeExec = true;\n          }\n\n          var mask = 0;\n          if (changeOwner) {\n            mask |= (changeRead ? PERMS.OWNER_READ : 0) + (changeWrite ? PERMS.OWNER_WRITE : 0) + (changeExec ? PERMS.OWNER_EXEC : 0) + (changeSetuid ? PERMS.SETUID : 0);\n          }\n          if (changeGroup) {\n            mask |= (changeRead ? PERMS.GROUP_READ : 0) + (changeWrite ? PERMS.GROUP_WRITE : 0) + (changeExec ? PERMS.GROUP_EXEC : 0) + (changeSetuid ? PERMS.SETGID : 0);\n          }\n          if (changeOther) {\n            mask |= (changeRead ? PERMS.OTHER_READ : 0) + (changeWrite ? PERMS.OTHER_WRITE : 0) + (changeExec ? PERMS.OTHER_EXEC : 0);\n          }\n\n          // Sticky bit is special - it's not tied to user, group or other.\n          if (changeSticky) {\n            mask |= PERMS.STICKY;\n          }\n\n          switch (operator) {\n            case '+':\n              newPerms |= mask;\n              break;\n\n            case '-':\n              newPerms &= ~mask;\n              break;\n\n            case '=':\n              newPerms = type + mask;\n\n              // According to POSIX, when using = to explicitly set the\n              // permissions, setuid and setgid can never be cleared.\n              if (common.statFollowLinks(file).isDirectory()) {\n                newPerms |= (PERMS.SETUID + PERMS.SETGID) & perms;\n              }\n              break;\n            default:\n              common.error('Could not recognize operator: `' + operator + '`');\n          }\n\n          if (options.verbose) {\n            console.log(file + ' -> ' + newPerms.toString(8));\n          }\n\n          if (perms !== newPerms) {\n            if (!options.verbose && options.changes) {\n              console.log(file + ' -> ' + newPerms.toString(8));\n            }\n            fs.chmodSync(file, newPerms);\n            perms = newPerms; // for the next round of changes!\n          }\n        } else {\n          common.error('Invalid symbolic mode change: ' + symbolicMode);\n        }\n      });\n    } else {\n      // they gave us a full number\n      newPerms = type + parseInt(mode, 8);\n\n      // POSIX rules are that setuid and setgid can only be added using numeric\n      // form, but not cleared.\n      if (common.statFollowLinks(file).isDirectory()) {\n        newPerms |= (PERMS.SETUID + PERMS.SETGID) & perms;\n      }\n\n      fs.chmodSync(file, newPerms);\n    }\n  });\n  return '';\n}\nmodule.exports = _chmod;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAIG,KAAK,GAAI,UAAUC,IAAI,EAAE;EAC3B,OAAO;IACLC,UAAU,EAAED,IAAI,CAACE,IAAI;IACrBC,WAAW,EAAEH,IAAI,CAACI,KAAK;IACvBC,UAAU,EAAEL,IAAI,CAACM,IAAI;IAErBC,UAAU,EAAEP,IAAI,CAACE,IAAI,IAAI,CAAC;IAC1BM,WAAW,EAAER,IAAI,CAACI,KAAK,IAAI,CAAC;IAC5BK,UAAU,EAAET,IAAI,CAACM,IAAI,IAAI,CAAC;IAE1BI,UAAU,EAAEV,IAAI,CAACE,IAAI,IAAI,CAAC;IAC1BS,WAAW,EAAEX,IAAI,CAACI,KAAK,IAAI,CAAC;IAC5BQ,UAAU,EAAEZ,IAAI,CAACM,IAAI,IAAI,CAAC;IAE1B;IACAO,MAAM,EAAEC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5BC,MAAM,EAAED,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5BE,MAAM,EAAEF,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;IAE5BG,SAAS,EAAEH,QAAQ,CAAC,SAAS,EAAE,CAAC;EAClC,CAAC;AACH,CAAC,CAAC;EACAZ,IAAI,EAAE,CAAC;EACPE,KAAK,EAAE,CAAC;EACRE,IAAI,EAAE;AACR,CAAC,CAAE;AAEHX,MAAM,CAACuB,QAAQ,CAAC,OAAO,EAAEC,MAAM,EAAE,CACjC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAMA,CAACC,OAAO,EAAEC,IAAI,EAAEC,WAAW,EAAE;EAC1C,IAAI,CAACA,WAAW,EAAE;IAChB,IAAIF,OAAO,CAACG,MAAM,GAAG,CAAC,IAAIH,OAAO,CAACI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACnD;MACA;MACA;MACA,EAAE,CAACC,OAAO,CAACC,IAAI,CAACC,SAAS,EAAE,EAAE,CAAC;IAChC,CAAC,MAAM;MACLhC,MAAM,CAACiC,KAAK,CAAC,0BAA0B,CAAC;IAC1C;EACF;EAEAR,OAAO,GAAGzB,MAAM,CAACkC,YAAY,CAACT,OAAO,EAAE;IACrC,GAAG,EAAE,WAAW;IAChB,GAAG,EAAE,SAAS;IACd,GAAG,EAAE;EACP,CAAC,CAAC;EAEFE,WAAW,GAAG,EAAE,CAACQ,KAAK,CAACJ,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EAEzC,IAAII,KAAK;;EAET;EACA,IAAIX,OAAO,CAACY,SAAS,EAAE;IACrBD,KAAK,GAAG,EAAE;IACVT,WAAW,CAACW,OAAO,CAAC,SAASC,OAAOA,CAACC,YAAY,EAAE;MACjD,IAAIC,IAAI,GAAGzC,MAAM,CAAC0C,iBAAiB,CAACF,YAAY,CAAC;MAEjD,IAAI,CAACC,IAAI,CAACE,cAAc,CAAC,CAAC,EAAE;QAC1BP,KAAK,CAACQ,IAAI,CAACJ,YAAY,CAAC;QAExB,IAAIC,IAAI,CAACI,WAAW,CAAC,CAAC,EAAE;UAAG;UACzB3C,EAAE,CAAC4C,WAAW,CAACN,YAAY,CAAC,CAACF,OAAO,CAAC,UAAUS,KAAK,EAAE;YACpDR,OAAO,CAACC,YAAY,GAAG,GAAG,GAAGO,KAAK,CAAC;UACrC,CAAC,CAAC;QACJ;MACF;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACLX,KAAK,GAAGT,WAAW;EACrB;EAEAS,KAAK,CAACE,OAAO,CAAC,SAASU,UAAUA,CAACC,IAAI,EAAE;IACtCA,IAAI,GAAG9C,IAAI,CAAC+C,OAAO,CAACD,IAAI,CAAC;IACzB,IAAI,CAAC/C,EAAE,CAACiD,UAAU,CAACF,IAAI,CAAC,EAAE;MACxBjD,MAAM,CAACiC,KAAK,CAAC,kBAAkB,GAAGgB,IAAI,CAAC;IACzC;;IAEA;IACA,IAAIxB,OAAO,CAACY,SAAS,IAAIrC,MAAM,CAAC0C,iBAAiB,CAACO,IAAI,CAAC,CAACN,cAAc,CAAC,CAAC,EAAE;MACxE;IACF;IAEA,IAAIF,IAAI,GAAGzC,MAAM,CAACoD,eAAe,CAACH,IAAI,CAAC;IACvC,IAAII,KAAK,GAAGZ,IAAI,CAACI,WAAW,CAAC,CAAC;IAC9B,IAAIS,KAAK,GAAGb,IAAI,CAACf,IAAI;IACrB,IAAI6B,IAAI,GAAGD,KAAK,GAAGlD,KAAK,CAACkB,SAAS;IAElC,IAAIkC,QAAQ,GAAGF,KAAK;IAEpB,IAAIG,KAAK,CAACtC,QAAQ,CAACO,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;MAC5B;MACAA,IAAI,CAACgC,KAAK,CAAC,GAAG,CAAC,CAACpB,OAAO,CAAC,UAAUqB,YAAY,EAAE;QAC9C,IAAIC,OAAO,GAAG,+BAA+B;QAC7C,IAAIC,OAAO,GAAGD,OAAO,CAACE,IAAI,CAACH,YAAY,CAAC;QAExC,IAAIE,OAAO,EAAE;UACX,IAAIE,OAAO,GAAGF,OAAO,CAAC,CAAC,CAAC;UACxB,IAAIG,QAAQ,GAAGH,OAAO,CAAC,CAAC,CAAC;UACzB,IAAII,MAAM,GAAGJ,OAAO,CAAC,CAAC,CAAC;UAEvB,IAAIK,WAAW,GAAGH,OAAO,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIJ,OAAO,KAAK,GAAG,IAAIA,OAAO,KAAK,EAAE;UAClF,IAAIK,WAAW,GAAGL,OAAO,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIJ,OAAO,KAAK,GAAG,IAAIA,OAAO,KAAK,EAAE;UAClF,IAAIM,WAAW,GAAGN,OAAO,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIJ,OAAO,KAAK,GAAG,IAAIA,OAAO,KAAK,EAAE;UAElF,IAAIO,UAAU,GAAGL,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;UAC3C,IAAII,WAAW,GAAGN,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;UAC5C,IAAIK,UAAU,GAAGP,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;UAC3C,IAAIM,aAAa,GAAGR,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;UAC9C,IAAIO,YAAY,GAAGT,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;UAC7C,IAAIQ,YAAY,GAAGV,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;UAE7C,IAAIM,aAAa,IAAIpB,KAAK,EAAE;YAC1BmB,UAAU,GAAG,IAAI;UACnB;UAEA,IAAII,IAAI,GAAG,CAAC;UACZ,IAAIV,WAAW,EAAE;YACfU,IAAI,IAAI,CAACN,UAAU,GAAGlE,KAAK,CAACa,UAAU,GAAG,CAAC,KAAKsD,WAAW,GAAGnE,KAAK,CAACY,WAAW,GAAG,CAAC,CAAC,IAAIwD,UAAU,GAAGpE,KAAK,CAACW,UAAU,GAAG,CAAC,CAAC,IAAI4D,YAAY,GAAGvE,KAAK,CAACiB,MAAM,GAAG,CAAC,CAAC;UAC/J;UACA,IAAI+C,WAAW,EAAE;YACfQ,IAAI,IAAI,CAACN,UAAU,GAAGlE,KAAK,CAACU,UAAU,GAAG,CAAC,KAAKyD,WAAW,GAAGnE,KAAK,CAACS,WAAW,GAAG,CAAC,CAAC,IAAI2D,UAAU,GAAGpE,KAAK,CAACQ,UAAU,GAAG,CAAC,CAAC,IAAI+D,YAAY,GAAGvE,KAAK,CAACgB,MAAM,GAAG,CAAC,CAAC;UAC/J;UACA,IAAIiD,WAAW,EAAE;YACfO,IAAI,IAAI,CAACN,UAAU,GAAGlE,KAAK,CAACM,UAAU,GAAG,CAAC,KAAK6D,WAAW,GAAGnE,KAAK,CAACI,WAAW,GAAG,CAAC,CAAC,IAAIgE,UAAU,GAAGpE,KAAK,CAACE,UAAU,GAAG,CAAC,CAAC;UAC3H;;UAEA;UACA,IAAIoE,YAAY,EAAE;YAChBE,IAAI,IAAIxE,KAAK,CAACc,MAAM;UACtB;UAEA,QAAQ8C,QAAQ;YACd,KAAK,GAAG;cACNR,QAAQ,IAAIoB,IAAI;cAChB;YAEF,KAAK,GAAG;cACNpB,QAAQ,IAAI,CAACoB,IAAI;cACjB;YAEF,KAAK,GAAG;cACNpB,QAAQ,GAAGD,IAAI,GAAGqB,IAAI;;cAEtB;cACA;cACA,IAAI5E,MAAM,CAACoD,eAAe,CAACH,IAAI,CAAC,CAACJ,WAAW,CAAC,CAAC,EAAE;gBAC9CW,QAAQ,IAAKpD,KAAK,CAACiB,MAAM,GAAGjB,KAAK,CAACgB,MAAM,GAAIkC,KAAK;cACnD;cACA;YACF;cACEtD,MAAM,CAACiC,KAAK,CAAC,iCAAiC,GAAG+B,QAAQ,GAAG,GAAG,CAAC;UACpE;UAEA,IAAIvC,OAAO,CAACoD,OAAO,EAAE;YACnBC,OAAO,CAACC,GAAG,CAAC9B,IAAI,GAAG,MAAM,GAAGO,QAAQ,CAACwB,QAAQ,CAAC,CAAC,CAAC,CAAC;UACnD;UAEA,IAAI1B,KAAK,KAAKE,QAAQ,EAAE;YACtB,IAAI,CAAC/B,OAAO,CAACoD,OAAO,IAAIpD,OAAO,CAACwD,OAAO,EAAE;cACvCH,OAAO,CAACC,GAAG,CAAC9B,IAAI,GAAG,MAAM,GAAGO,QAAQ,CAACwB,QAAQ,CAAC,CAAC,CAAC,CAAC;YACnD;YACA9E,EAAE,CAACgF,SAAS,CAACjC,IAAI,EAAEO,QAAQ,CAAC;YAC5BF,KAAK,GAAGE,QAAQ,CAAC,CAAC;UACpB;QACF,CAAC,MAAM;UACLxD,MAAM,CAACiC,KAAK,CAAC,gCAAgC,GAAG0B,YAAY,CAAC;QAC/D;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAH,QAAQ,GAAGD,IAAI,GAAGpC,QAAQ,CAACO,IAAI,EAAE,CAAC,CAAC;;MAEnC;MACA;MACA,IAAI1B,MAAM,CAACoD,eAAe,CAACH,IAAI,CAAC,CAACJ,WAAW,CAAC,CAAC,EAAE;QAC9CW,QAAQ,IAAKpD,KAAK,CAACiB,MAAM,GAAGjB,KAAK,CAACgB,MAAM,GAAIkC,KAAK;MACnD;MAEApD,EAAE,CAACgF,SAAS,CAACjC,IAAI,EAAEO,QAAQ,CAAC;IAC9B;EACF,CAAC,CAAC;EACF,OAAO,EAAE;AACX;AACA2B,MAAM,CAACC,OAAO,GAAG5D,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}