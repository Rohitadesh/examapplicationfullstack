{"ast":null,"code":"var common = require('./common');\nvar _tempDir = require('./tempdir').tempDir;\nvar _pwd = require('./pwd');\nvar path = require('path');\nvar fs = require('fs');\nvar child = require('child_process');\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\nvar DEFAULT_ERROR_CODE = 1;\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false\n});\n\n// We use this function to run `exec` synchronously while also providing realtime\n// output.\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n  var tempDir = _tempDir();\n  var paramsFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8'\n  }, opts);\n  if (fs.existsSync(paramsFile)) common.unlinkSync(paramsFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n  opts.cwd = path.resolve(opts.cwd);\n  var paramsToSerialize = {\n    command: cmd,\n    execOptions: opts,\n    pipe: pipe,\n    stdoutFile: stdoutFile,\n    stderrFile: stderrFile\n  };\n\n  // Create the files and ensure these are locked down (for read and write) to\n  // the current user. The main concerns here are:\n  //\n  // * If we execute a command which prints sensitive output, then\n  //   stdoutFile/stderrFile must not be readable by other users.\n  // * paramsFile must not be readable by other users, or else they can read it\n  //   to figure out the path for stdoutFile/stderrFile and create these first\n  //   (locked down to their own access), which will crash exec() when it tries\n  //   to write to the files.\n  function writeFileLockedDown(filePath, data) {\n    fs.writeFileSync(filePath, data, {\n      encoding: 'utf8',\n      mode: parseInt('600', 8)\n    });\n  }\n  writeFileLockedDown(stdoutFile, '');\n  writeFileLockedDown(stderrFile, '');\n  writeFileLockedDown(paramsFile, JSON.stringify(paramsToSerialize));\n  var execArgs = [path.join(__dirname, 'exec-child.js'), paramsFile];\n\n  /* istanbul ignore else */\n  if (opts.silent) {\n    opts.stdio = 'ignore';\n  } else {\n    opts.stdio = [0, 1, 2];\n  }\n  var code = 0;\n\n  // Welcome to the future\n  try {\n    // Bad things if we pass in a `shell` option to child_process.execFileSync,\n    // so we need to explicitly remove it here.\n    delete opts.shell;\n    child.execFileSync(common.config.execPath, execArgs, opts);\n  } catch (e) {\n    // Commands with non-zero exit code raise an exception.\n    code = e.status || DEFAULT_ERROR_CODE;\n  }\n\n  // fs.readFileSync uses buffer encoding by default, so call\n  // it without the encoding option if the encoding is 'buffer'.\n  // Also, if the exec timeout is too short for node to start up,\n  // the files will not be created, so these calls will throw.\n  var stdout = '';\n  var stderr = '';\n  if (opts.encoding === 'buffer') {\n    stdout = fs.readFileSync(stdoutFile);\n    stderr = fs.readFileSync(stderrFile);\n  } else {\n    stdout = fs.readFileSync(stdoutFile, opts.encoding);\n    stderr = fs.readFileSync(stderrFile, opts.encoding);\n  }\n\n  // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  // and we locked down permissions (see the note above).\n  try {\n    common.unlinkSync(paramsFile);\n  } catch (e) {}\n  try {\n    common.unlinkSync(stderrFile);\n  } catch (e) {}\n  try {\n    common.unlinkSync(stdoutFile);\n  } catch (e) {}\n  if (code !== 0) {\n    // Note: `silent` should be unconditionally true to avoid double-printing\n    // the command's stderr, and to avoid printing any stderr when the user has\n    // set `shell.config.silent`.\n    common.error(stderr, code, {\n      continue: true,\n      silent: true\n    });\n  }\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n\n// Wrapper around exec() to enable echoing output to console in real time\nfunction execAsync(cmd, opts, pipe, callback) {\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8'\n  }, opts);\n  var c = child.exec(cmd, opts, function (err, stdout, stderr) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n        /* istanbul ignore next */\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n  if (pipe) c.stdin.end(pipe);\n  if (!opts.silent) {\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n  }\n  return c;\n}\n\n//@\n//@ ### exec(command [, options] [, callback])\n//@\n//@ Available options:\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value (default: `false`).\n//@ + `silent`: Do not echo program output to console (default: `false`).\n//@ + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n//@   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n//@ + and any option available to Node.js's\n//@   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n  var pipe = common.readFromPipe();\n\n  // Callback is defined instead of options.\n  if (typeof options === 'function') {\n    callback = options;\n    options = {\n      async: true\n    };\n  }\n\n  // Callback is defined with options.\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n  options = common.extend({\n    silent: common.config.silent,\n    async: false\n  }, options);\n  if (options.async) {\n    return execAsync(command, options, pipe, callback);\n  } else {\n    return execSync(command, options, pipe);\n  }\n}\nmodule.exports = _exec;","map":{"version":3,"names":["common","require","_tempDir","tempDir","_pwd","path","fs","child","DEFAULT_MAXBUFFER_SIZE","DEFAULT_ERROR_CODE","register","_exec","unix","canReceivePipe","wrapOutput","execSync","cmd","opts","pipe","config","execPath","error","paramsFile","resolve","randomFileName","stderrFile","stdoutFile","extend","silent","cwd","toString","env","process","maxBuffer","encoding","existsSync","unlinkSync","paramsToSerialize","command","execOptions","writeFileLockedDown","filePath","data","writeFileSync","mode","parseInt","JSON","stringify","execArgs","join","__dirname","stdio","code","shell","execFileSync","e","status","stdout","stderr","readFileSync","continue","obj","ShellString","execAsync","callback","c","exec","err","undefined","stdin","end","options","readFromPipe","async","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/exec.js"],"sourcesContent":["var common = require('./common');\nvar _tempDir = require('./tempdir').tempDir;\nvar _pwd = require('./pwd');\nvar path = require('path');\nvar fs = require('fs');\nvar child = require('child_process');\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\nvar DEFAULT_ERROR_CODE = 1;\n\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false,\n});\n\n// We use this function to run `exec` synchronously while also providing realtime\n// output.\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n  var paramsFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  if (fs.existsSync(paramsFile)) common.unlinkSync(paramsFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n\n  opts.cwd = path.resolve(opts.cwd);\n\n  var paramsToSerialize = {\n    command: cmd,\n    execOptions: opts,\n    pipe: pipe,\n    stdoutFile: stdoutFile,\n    stderrFile: stderrFile,\n  };\n\n  // Create the files and ensure these are locked down (for read and write) to\n  // the current user. The main concerns here are:\n  //\n  // * If we execute a command which prints sensitive output, then\n  //   stdoutFile/stderrFile must not be readable by other users.\n  // * paramsFile must not be readable by other users, or else they can read it\n  //   to figure out the path for stdoutFile/stderrFile and create these first\n  //   (locked down to their own access), which will crash exec() when it tries\n  //   to write to the files.\n  function writeFileLockedDown(filePath, data) {\n    fs.writeFileSync(filePath, data, {\n      encoding: 'utf8',\n      mode: parseInt('600', 8),\n    });\n  }\n  writeFileLockedDown(stdoutFile, '');\n  writeFileLockedDown(stderrFile, '');\n  writeFileLockedDown(paramsFile, JSON.stringify(paramsToSerialize));\n\n  var execArgs = [\n    path.join(__dirname, 'exec-child.js'),\n    paramsFile,\n  ];\n\n  /* istanbul ignore else */\n  if (opts.silent) {\n    opts.stdio = 'ignore';\n  } else {\n    opts.stdio = [0, 1, 2];\n  }\n\n  var code = 0;\n\n  // Welcome to the future\n  try {\n    // Bad things if we pass in a `shell` option to child_process.execFileSync,\n    // so we need to explicitly remove it here.\n    delete opts.shell;\n\n    child.execFileSync(common.config.execPath, execArgs, opts);\n  } catch (e) {\n    // Commands with non-zero exit code raise an exception.\n    code = e.status || DEFAULT_ERROR_CODE;\n  }\n\n  // fs.readFileSync uses buffer encoding by default, so call\n  // it without the encoding option if the encoding is 'buffer'.\n  // Also, if the exec timeout is too short for node to start up,\n  // the files will not be created, so these calls will throw.\n  var stdout = '';\n  var stderr = '';\n  if (opts.encoding === 'buffer') {\n    stdout = fs.readFileSync(stdoutFile);\n    stderr = fs.readFileSync(stderrFile);\n  } else {\n    stdout = fs.readFileSync(stdoutFile, opts.encoding);\n    stderr = fs.readFileSync(stderrFile, opts.encoding);\n  }\n\n  // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  // and we locked down permissions (see the note above).\n  try { common.unlinkSync(paramsFile); } catch (e) {}\n  try { common.unlinkSync(stderrFile); } catch (e) {}\n  try { common.unlinkSync(stdoutFile); } catch (e) {}\n\n  if (code !== 0) {\n    // Note: `silent` should be unconditionally true to avoid double-printing\n    // the command's stderr, and to avoid printing any stderr when the user has\n    // set `shell.config.silent`.\n    common.error(stderr, code, { continue: true, silent: true });\n  }\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n\n// Wrapper around exec() to enable echoing output to console in real time\nfunction execAsync(cmd, opts, pipe, callback) {\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  var c = child.exec(cmd, opts, function (err, stdout, stderr) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n        /* istanbul ignore next */\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n\n  if (pipe) c.stdin.end(pipe);\n\n  if (!opts.silent) {\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n  }\n\n  return c;\n}\n\n//@\n//@ ### exec(command [, options] [, callback])\n//@\n//@ Available options:\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value (default: `false`).\n//@ + `silent`: Do not echo program output to console (default: `false`).\n//@ + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n//@   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n//@ + and any option available to Node.js's\n//@   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n\n  var pipe = common.readFromPipe();\n\n  // Callback is defined instead of options.\n  if (typeof options === 'function') {\n    callback = options;\n    options = { async: true };\n  }\n\n  // Callback is defined with options.\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false,\n  }, options);\n\n  if (options.async) {\n    return execAsync(command, options, pipe, callback);\n  } else {\n    return execSync(command, options, pipe);\n  }\n}\nmodule.exports = _exec;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}