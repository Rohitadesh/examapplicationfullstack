{"ast":null,"code":"var common = require('./common');\nvar _cd = require('./cd');\nvar path = require('path');\ncommon.register('dirs', _dirs, {\n  wrapOutput: false\n});\ncommon.register('pushd', _pushd, {\n  wrapOutput: false\n});\ncommon.register('popd', _popd, {\n  wrapOutput: false\n});\n\n// Pushd/popd/dirs internals\nvar _dirStack = [];\nfunction _isStackIndex(index) {\n  return /^[\\-+]\\d+$/.test(index);\n}\nfunction _parseStackIndex(index) {\n  if (_isStackIndex(index)) {\n    if (Math.abs(index) < _dirStack.length + 1) {\n      // +1 for pwd\n      return /^-/.test(index) ? Number(index) - 1 : Number(index);\n    }\n    common.error(index + ': directory stack index out of range');\n  } else {\n    common.error(index + ': invalid number');\n  }\n}\nfunction _actualDirStack() {\n  return [process.cwd()].concat(_dirStack);\n}\n\n//@\n//@ ### pushd([options,] [dir | '-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `dir`: Sets the current working directory to the top of the stack, then executes the equivalent of `cd dir`.\n//@ + `+N`: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@ + `-N`: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ // process.cwd() === '/usr'\n//@ pushd('/etc'); // Returns /etc /usr\n//@ pushd('+1');   // Returns /usr /etc\n//@ ```\n//@\n//@ Save the current directory on the top of the directory stack and then `cd` to `dir`. With no arguments, `pushd` exchanges the top two directories. Returns an array of paths in the stack.\nfunction _pushd(options, dir) {\n  if (_isStackIndex(options)) {\n    dir = options;\n    options = '';\n  }\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet'\n  });\n  var dirs = _actualDirStack();\n  if (dir === '+0') {\n    return dirs; // +0 is a noop\n  } else if (!dir) {\n    if (dirs.length > 1) {\n      dirs = dirs.splice(1, 1).concat(dirs);\n    } else {\n      return common.error('no other directory');\n    }\n  } else if (_isStackIndex(dir)) {\n    var n = _parseStackIndex(dir);\n    dirs = dirs.slice(n).concat(dirs.slice(0, n));\n  } else {\n    if (options['no-cd']) {\n      dirs.splice(1, 0, dir);\n    } else {\n      dirs.unshift(dir);\n    }\n  }\n  if (options['no-cd']) {\n    dirs = dirs.slice(1);\n  } else {\n    dir = path.resolve(dirs.shift());\n    _cd('', dir);\n  }\n  _dirStack = dirs;\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.pushd = _pushd;\n\n//@\n//@\n//@ ### popd([options,] ['-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppress the normal directory change when removing directories from the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.\n//@ + `-N`: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo(process.cwd()); // '/usr'\n//@ pushd('/etc');       // '/etc /usr'\n//@ echo(process.cwd()); // '/etc'\n//@ popd();              // '/usr'\n//@ echo(process.cwd()); // '/usr'\n//@ ```\n//@\n//@ When no arguments are given, `popd` removes the top directory from the stack and performs a `cd` to the new top directory. The elements are numbered from 0, starting at the first directory listed with dirs (i.e., `popd` is equivalent to `popd +0`). Returns an array of paths in the stack.\nfunction _popd(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet'\n  });\n  if (!_dirStack.length) {\n    return common.error('directory stack empty');\n  }\n  index = _parseStackIndex(index || '+0');\n  if (options['no-cd'] || index > 0 || _dirStack.length + index === 0) {\n    index = index > 0 ? index - 1 : index;\n    _dirStack.splice(index, 1);\n  } else {\n    var dir = path.resolve(_dirStack.shift());\n    _cd('', dir);\n  }\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.popd = _popd;\n\n//@\n//@\n//@ ### dirs([options | '+N' | '-N'])\n//@\n//@ Available options:\n//@\n//@ + `-c`: Clears the directory stack by deleting all of the elements.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.\n//@ + `-N`: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.\n//@\n//@ Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if `+N` or `-N` was specified.\n//@\n//@ See also: `pushd`, `popd`\nfunction _dirs(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n  options = common.parseOptions(options, {\n    'c': 'clear',\n    'q': 'quiet'\n  });\n  if (options.clear) {\n    _dirStack = [];\n    return _dirStack;\n  }\n  var stack = _actualDirStack();\n  if (index) {\n    index = _parseStackIndex(index);\n    if (index < 0) {\n      index = stack.length + index;\n    }\n    if (!options.quiet) {\n      common.log(stack[index]);\n    }\n    return stack[index];\n  }\n  if (!options.quiet) {\n    common.log(stack.join(' '));\n  }\n  return stack;\n}\nexports.dirs = _dirs;","map":{"version":3,"names":["common","require","_cd","path","register","_dirs","wrapOutput","_pushd","_popd","_dirStack","_isStackIndex","index","test","_parseStackIndex","Math","abs","length","Number","error","_actualDirStack","process","cwd","concat","options","dir","parseOptions","dirs","splice","n","slice","unshift","resolve","shift","quiet","exports","pushd","popd","clear","stack","log","join"],"sources":["/home/lenovo/node_modules/shelljs/src/dirs.js"],"sourcesContent":["var common = require('./common');\nvar _cd = require('./cd');\nvar path = require('path');\n\ncommon.register('dirs', _dirs, {\n  wrapOutput: false,\n});\ncommon.register('pushd', _pushd, {\n  wrapOutput: false,\n});\ncommon.register('popd', _popd, {\n  wrapOutput: false,\n});\n\n// Pushd/popd/dirs internals\nvar _dirStack = [];\n\nfunction _isStackIndex(index) {\n  return (/^[\\-+]\\d+$/).test(index);\n}\n\nfunction _parseStackIndex(index) {\n  if (_isStackIndex(index)) {\n    if (Math.abs(index) < _dirStack.length + 1) { // +1 for pwd\n      return (/^-/).test(index) ? Number(index) - 1 : Number(index);\n    }\n    common.error(index + ': directory stack index out of range');\n  } else {\n    common.error(index + ': invalid number');\n  }\n}\n\nfunction _actualDirStack() {\n  return [process.cwd()].concat(_dirStack);\n}\n\n//@\n//@ ### pushd([options,] [dir | '-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `dir`: Sets the current working directory to the top of the stack, then executes the equivalent of `cd dir`.\n//@ + `+N`: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@ + `-N`: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ // process.cwd() === '/usr'\n//@ pushd('/etc'); // Returns /etc /usr\n//@ pushd('+1');   // Returns /usr /etc\n//@ ```\n//@\n//@ Save the current directory on the top of the directory stack and then `cd` to `dir`. With no arguments, `pushd` exchanges the top two directories. Returns an array of paths in the stack.\nfunction _pushd(options, dir) {\n  if (_isStackIndex(options)) {\n    dir = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet',\n  });\n\n  var dirs = _actualDirStack();\n\n  if (dir === '+0') {\n    return dirs; // +0 is a noop\n  } else if (!dir) {\n    if (dirs.length > 1) {\n      dirs = dirs.splice(1, 1).concat(dirs);\n    } else {\n      return common.error('no other directory');\n    }\n  } else if (_isStackIndex(dir)) {\n    var n = _parseStackIndex(dir);\n    dirs = dirs.slice(n).concat(dirs.slice(0, n));\n  } else {\n    if (options['no-cd']) {\n      dirs.splice(1, 0, dir);\n    } else {\n      dirs.unshift(dir);\n    }\n  }\n\n  if (options['no-cd']) {\n    dirs = dirs.slice(1);\n  } else {\n    dir = path.resolve(dirs.shift());\n    _cd('', dir);\n  }\n\n  _dirStack = dirs;\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.pushd = _pushd;\n\n//@\n//@\n//@ ### popd([options,] ['-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppress the normal directory change when removing directories from the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.\n//@ + `-N`: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo(process.cwd()); // '/usr'\n//@ pushd('/etc');       // '/etc /usr'\n//@ echo(process.cwd()); // '/etc'\n//@ popd();              // '/usr'\n//@ echo(process.cwd()); // '/usr'\n//@ ```\n//@\n//@ When no arguments are given, `popd` removes the top directory from the stack and performs a `cd` to the new top directory. The elements are numbered from 0, starting at the first directory listed with dirs (i.e., `popd` is equivalent to `popd +0`). Returns an array of paths in the stack.\nfunction _popd(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet',\n  });\n\n  if (!_dirStack.length) {\n    return common.error('directory stack empty');\n  }\n\n  index = _parseStackIndex(index || '+0');\n\n  if (options['no-cd'] || index > 0 || _dirStack.length + index === 0) {\n    index = index > 0 ? index - 1 : index;\n    _dirStack.splice(index, 1);\n  } else {\n    var dir = path.resolve(_dirStack.shift());\n    _cd('', dir);\n  }\n\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.popd = _popd;\n\n//@\n//@\n//@ ### dirs([options | '+N' | '-N'])\n//@\n//@ Available options:\n//@\n//@ + `-c`: Clears the directory stack by deleting all of the elements.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.\n//@ + `-N`: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.\n//@\n//@ Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if `+N` or `-N` was specified.\n//@\n//@ See also: `pushd`, `popd`\nfunction _dirs(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'c': 'clear',\n    'q': 'quiet',\n  });\n\n  if (options.clear) {\n    _dirStack = [];\n    return _dirStack;\n  }\n\n  var stack = _actualDirStack();\n\n  if (index) {\n    index = _parseStackIndex(index);\n\n    if (index < 0) {\n      index = stack.length + index;\n    }\n\n    if (!options.quiet) {\n      common.log(stack[index]);\n    }\n    return stack[index];\n  }\n\n  if (!options.quiet) {\n    common.log(stack.join(' '));\n  }\n\n  return stack;\n}\nexports.dirs = _dirs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}