{"ast":null,"code":"var path = require('path');\nvar common = require('./common');\nvar _ls = require('./ls');\ncommon.register('find', _find, {});\n\n//@\n//@ ### find(path [, path ...])\n//@ ### find(path_array)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ find('src', 'lib');\n//@ find(['src', 'lib']); // same as above\n//@ find('.').filter(function(file) { return file.match(/\\.js$/); });\n//@ ```\n//@\n//@ Returns array of all files (however deep) in the given paths.\n//@\n//@ The main difference from `ls('-R', path)` is that the resulting file names\n//@ include the base directories (e.g., `lib/resources/file1` instead of just `file1`).\nfunction _find(options, paths) {\n  if (!paths) {\n    common.error('no path specified');\n  } else if (typeof paths === 'string') {\n    paths = [].slice.call(arguments, 1);\n  }\n  var list = [];\n  function pushFile(file) {\n    if (process.platform === 'win32') {\n      file = file.replace(/\\\\/g, '/');\n    }\n    list.push(file);\n  }\n\n  // why not simply do `ls('-R', paths)`? because the output wouldn't give the base dirs\n  // to get the base dir in the output, we need instead `ls('-R', 'dir/*')` for every directory\n\n  paths.forEach(function (file) {\n    var stat;\n    try {\n      stat = common.statFollowLinks(file);\n    } catch (e) {\n      common.error('no such file or directory: ' + file);\n    }\n    pushFile(file);\n    if (stat.isDirectory()) {\n      _ls({\n        recursive: true,\n        all: true\n      }, file).forEach(function (subfile) {\n        pushFile(path.join(file, subfile));\n      });\n    }\n  });\n  return list;\n}\nmodule.exports = _find;","map":{"version":3,"names":["path","require","common","_ls","register","_find","options","paths","error","slice","call","arguments","list","pushFile","file","process","platform","replace","push","forEach","stat","statFollowLinks","e","isDirectory","recursive","all","subfile","join","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/find.js"],"sourcesContent":["var path = require('path');\nvar common = require('./common');\nvar _ls = require('./ls');\n\ncommon.register('find', _find, {});\n\n//@\n//@ ### find(path [, path ...])\n//@ ### find(path_array)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ find('src', 'lib');\n//@ find(['src', 'lib']); // same as above\n//@ find('.').filter(function(file) { return file.match(/\\.js$/); });\n//@ ```\n//@\n//@ Returns array of all files (however deep) in the given paths.\n//@\n//@ The main difference from `ls('-R', path)` is that the resulting file names\n//@ include the base directories (e.g., `lib/resources/file1` instead of just `file1`).\nfunction _find(options, paths) {\n  if (!paths) {\n    common.error('no path specified');\n  } else if (typeof paths === 'string') {\n    paths = [].slice.call(arguments, 1);\n  }\n\n  var list = [];\n\n  function pushFile(file) {\n    if (process.platform === 'win32') {\n      file = file.replace(/\\\\/g, '/');\n    }\n    list.push(file);\n  }\n\n  // why not simply do `ls('-R', paths)`? because the output wouldn't give the base dirs\n  // to get the base dir in the output, we need instead `ls('-R', 'dir/*')` for every directory\n\n  paths.forEach(function (file) {\n    var stat;\n    try {\n      stat = common.statFollowLinks(file);\n    } catch (e) {\n      common.error('no such file or directory: ' + file);\n    }\n\n    pushFile(file);\n\n    if (stat.isDirectory()) {\n      _ls({ recursive: true, all: true }, file).forEach(function (subfile) {\n        pushFile(path.join(file, subfile));\n      });\n    }\n  });\n\n  return list;\n}\nmodule.exports = _find;\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIE,GAAG,GAAGF,OAAO,CAAC,MAAM,CAAC;AAEzBC,MAAM,CAACE,QAAQ,CAAC,MAAM,EAAEC,KAAK,EAAE,CAAC,CAAC,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAACC,OAAO,EAAEC,KAAK,EAAE;EAC7B,IAAI,CAACA,KAAK,EAAE;IACVL,MAAM,CAACM,KAAK,CAAC,mBAAmB,CAAC;EACnC,CAAC,MAAM,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IACpCA,KAAK,GAAG,EAAE,CAACE,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EACrC;EAEA,IAAIC,IAAI,GAAG,EAAE;EAEb,SAASC,QAAQA,CAACC,IAAI,EAAE;IACtB,IAAIC,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE;MAChCF,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IACjC;IACAL,IAAI,CAACM,IAAI,CAACJ,IAAI,CAAC;EACjB;;EAEA;EACA;;EAEAP,KAAK,CAACY,OAAO,CAAC,UAAUL,IAAI,EAAE;IAC5B,IAAIM,IAAI;IACR,IAAI;MACFA,IAAI,GAAGlB,MAAM,CAACmB,eAAe,CAACP,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACVpB,MAAM,CAACM,KAAK,CAAC,6BAA6B,GAAGM,IAAI,CAAC;IACpD;IAEAD,QAAQ,CAACC,IAAI,CAAC;IAEd,IAAIM,IAAI,CAACG,WAAW,CAAC,CAAC,EAAE;MACtBpB,GAAG,CAAC;QAAEqB,SAAS,EAAE,IAAI;QAAEC,GAAG,EAAE;MAAK,CAAC,EAAEX,IAAI,CAAC,CAACK,OAAO,CAAC,UAAUO,OAAO,EAAE;QACnEb,QAAQ,CAACb,IAAI,CAAC2B,IAAI,CAACb,IAAI,EAAEY,OAAO,CAAC,CAAC;MACpC,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,OAAOd,IAAI;AACb;AACAgB,MAAM,CAACC,OAAO,GAAGxB,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}