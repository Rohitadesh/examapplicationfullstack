{"ast":null,"code":"var common = require('./common');\nvar fs = require('fs');\ncommon.register('head', _head, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'numLines'\n  }\n});\n\n// Reads |numLines| lines or the entire file, whichever is less.\nfunction readSomeLines(file, numLines) {\n  var buf = common.buffer();\n  var bufLength = buf.length;\n  var bytesRead = bufLength;\n  var pos = 0;\n  var fdr = fs.openSync(file, 'r');\n  var numLinesRead = 0;\n  var ret = '';\n  while (bytesRead === bufLength && numLinesRead < numLines) {\n    bytesRead = fs.readSync(fdr, buf, 0, bufLength, pos);\n    var bufStr = buf.toString('utf8', 0, bytesRead);\n    numLinesRead += bufStr.split('\\n').length - 1;\n    ret += bufStr;\n    pos += bytesRead;\n  }\n  fs.closeSync(fdr);\n  return ret;\n}\n\n//@\n//@ ### head([{'-n': \\<num\\>},] file [, file ...])\n//@ ### head([{'-n': \\<num\\>},] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n <num>`: Show the first `<num>` lines of the files\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = head({'-n': 1}, 'file*.txt');\n//@ var str = head('file1', 'file2');\n//@ var str = head(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Read the start of a file.\nfunction _head(options, files) {\n  var head = [];\n  var pipe = common.readFromPipe();\n  if (!files && !pipe) common.error('no paths given');\n  var idx = 1;\n  if (options.numLines === true) {\n    idx = 2;\n    options.numLines = Number(arguments[1]);\n  } else if (options.numLines === false) {\n    options.numLines = 10;\n  }\n  files = [].slice.call(arguments, idx);\n  if (pipe) {\n    files.unshift('-');\n  }\n  var shouldAppendNewline = false;\n  files.forEach(function (file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, {\n          continue: true\n        });\n        return;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error(\"error reading '\" + file + \"': Is a directory\", {\n          continue: true\n        });\n        return;\n      }\n    }\n    var contents;\n    if (file === '-') {\n      contents = pipe;\n    } else if (options.numLines < 0) {\n      contents = fs.readFileSync(file, 'utf8');\n    } else {\n      contents = readSomeLines(file, options.numLines);\n    }\n    var lines = contents.split('\\n');\n    var hasTrailingNewline = lines[lines.length - 1] === '';\n    if (hasTrailingNewline) {\n      lines.pop();\n    }\n    shouldAppendNewline = hasTrailingNewline || options.numLines < lines.length;\n    head = head.concat(lines.slice(0, options.numLines));\n  });\n  if (shouldAppendNewline) {\n    head.push(''); // to add a trailing newline once we join\n  }\n\n  return head.join('\\n');\n}\nmodule.exports = _head;","map":{"version":3,"names":["common","require","fs","register","_head","canReceivePipe","cmdOptions","readSomeLines","file","numLines","buf","buffer","bufLength","length","bytesRead","pos","fdr","openSync","numLinesRead","ret","readSync","bufStr","toString","split","closeSync","options","files","head","pipe","readFromPipe","error","idx","Number","arguments","slice","call","unshift","shouldAppendNewline","forEach","existsSync","continue","statFollowLinks","isDirectory","contents","readFileSync","lines","hasTrailingNewline","pop","concat","push","join","module","exports"],"sources":["/home/lenovo/node_modules/shelljs/src/head.js"],"sourcesContent":["var common = require('./common');\nvar fs = require('fs');\n\ncommon.register('head', _head, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'numLines',\n  },\n});\n\n// Reads |numLines| lines or the entire file, whichever is less.\nfunction readSomeLines(file, numLines) {\n  var buf = common.buffer();\n  var bufLength = buf.length;\n  var bytesRead = bufLength;\n  var pos = 0;\n\n  var fdr = fs.openSync(file, 'r');\n  var numLinesRead = 0;\n  var ret = '';\n  while (bytesRead === bufLength && numLinesRead < numLines) {\n    bytesRead = fs.readSync(fdr, buf, 0, bufLength, pos);\n    var bufStr = buf.toString('utf8', 0, bytesRead);\n    numLinesRead += bufStr.split('\\n').length - 1;\n    ret += bufStr;\n    pos += bytesRead;\n  }\n\n  fs.closeSync(fdr);\n  return ret;\n}\n\n//@\n//@ ### head([{'-n': \\<num\\>},] file [, file ...])\n//@ ### head([{'-n': \\<num\\>},] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n <num>`: Show the first `<num>` lines of the files\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = head({'-n': 1}, 'file*.txt');\n//@ var str = head('file1', 'file2');\n//@ var str = head(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Read the start of a file.\nfunction _head(options, files) {\n  var head = [];\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no paths given');\n\n  var idx = 1;\n  if (options.numLines === true) {\n    idx = 2;\n    options.numLines = Number(arguments[1]);\n  } else if (options.numLines === false) {\n    options.numLines = 10;\n  }\n  files = [].slice.call(arguments, idx);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var shouldAppendNewline = false;\n  files.forEach(function (file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, { continue: true });\n        return;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error(\"error reading '\" + file + \"': Is a directory\", {\n          continue: true,\n        });\n        return;\n      }\n    }\n\n    var contents;\n    if (file === '-') {\n      contents = pipe;\n    } else if (options.numLines < 0) {\n      contents = fs.readFileSync(file, 'utf8');\n    } else {\n      contents = readSomeLines(file, options.numLines);\n    }\n\n    var lines = contents.split('\\n');\n    var hasTrailingNewline = (lines[lines.length - 1] === '');\n    if (hasTrailingNewline) {\n      lines.pop();\n    }\n    shouldAppendNewline = (hasTrailingNewline || options.numLines < lines.length);\n\n    head = head.concat(lines.slice(0, options.numLines));\n  });\n\n  if (shouldAppendNewline) {\n    head.push(''); // to add a trailing newline once we join\n  }\n  return head.join('\\n');\n}\nmodule.exports = _head;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}