{"ast":null,"code":"// Ignore warning about 'new String()'\n/* eslint no-new-wrappers: 0 */\n'use strict';\n\nvar os = require('os');\nvar fs = require('fs');\nvar glob = require('glob');\nvar shell = require('..');\nvar shellMethods = Object.create(shell);\nexports.extend = Object.assign;\n\n// Check if we're running under electron\nvar isElectron = Boolean(process.versions.electron);\n\n// Module globals (assume no execPath by default)\nvar DEFAULT_CONFIG = {\n  fatal: false,\n  globOptions: {},\n  maxdepth: 255,\n  noglob: false,\n  silent: false,\n  verbose: false,\n  execPath: null,\n  bufLength: 64 * 1024 // 64KB\n};\n\nvar config = {\n  reset: function () {\n    Object.assign(this, DEFAULT_CONFIG);\n    if (!isElectron) {\n      this.execPath = process.execPath;\n    }\n  },\n  resetForTesting: function () {\n    this.reset();\n    this.silent = true;\n  }\n};\nconfig.reset();\nexports.config = config;\n\n// Note: commands should generally consider these as read-only values.\nvar state = {\n  error: null,\n  errorCode: 0,\n  currentCmd: 'shell.js'\n};\nexports.state = state;\ndelete process.env.OLDPWD; // initially, there's no previous directory\n\n// Reliably test if something is any sort of javascript object\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\nexports.isObject = isObject;\nfunction log() {\n  /* istanbul ignore next */\n  if (!config.silent) {\n    console.error.apply(console, arguments);\n  }\n}\nexports.log = log;\n\n// Converts strings to be equivalent across all platforms. Primarily responsible\n// for making sure we use '/' instead of '\\' as path separators, but this may be\n// expanded in the future if necessary\nfunction convertErrorOutput(msg) {\n  if (typeof msg !== 'string') {\n    throw new TypeError('input must be a string');\n  }\n  return msg.replace(/\\\\/g, '/');\n}\nexports.convertErrorOutput = convertErrorOutput;\n\n// Shows error message. Throws if config.fatal is true\nfunction error(msg, _code, options) {\n  // Validate input\n  if (typeof msg !== 'string') throw new Error('msg must be a string');\n  var DEFAULT_OPTIONS = {\n    continue: false,\n    code: 1,\n    prefix: state.currentCmd + ': ',\n    silent: false\n  };\n  if (typeof _code === 'number' && isObject(options)) {\n    options.code = _code;\n  } else if (isObject(_code)) {\n    // no 'code'\n    options = _code;\n  } else if (typeof _code === 'number') {\n    // no 'options'\n    options = {\n      code: _code\n    };\n  } else if (typeof _code !== 'number') {\n    // only 'msg'\n    options = {};\n  }\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  if (!state.errorCode) state.errorCode = options.code;\n  var logEntry = convertErrorOutput(options.prefix + msg);\n  state.error = state.error ? state.error + '\\n' : '';\n  state.error += logEntry;\n\n  // Throw an error, or log the entry\n  if (config.fatal) throw new Error(logEntry);\n  if (msg.length > 0 && !options.silent) log(logEntry);\n  if (!options.continue) {\n    throw {\n      msg: 'earlyExit',\n      retValue: new ShellString('', state.error, state.errorCode)\n    };\n  }\n}\nexports.error = error;\n\n//@\n//@ ### ShellString(str)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var foo = ShellString('hello world');\n//@ ```\n//@\n//@ Turns a regular string into a string-like object similar to what each\n//@ command returns. This has special methods, like `.to()` and `.toEnd()`.\nfunction ShellString(stdout, stderr, code) {\n  var that;\n  if (stdout instanceof Array) {\n    that = stdout;\n    that.stdout = stdout.join('\\n');\n    if (stdout.length > 0) that.stdout += '\\n';\n  } else {\n    that = new String(stdout);\n    that.stdout = stdout;\n  }\n  that.stderr = stderr;\n  that.code = code;\n  // A list of all commands that can appear on the right-hand side of a pipe\n  // (populated by calls to common.wrap())\n  pipeMethods.forEach(function (cmd) {\n    that[cmd] = shellMethods[cmd].bind(that);\n  });\n  return that;\n}\nexports.ShellString = ShellString;\n\n// Returns {'alice': true, 'bob': false} when passed a string and dictionary as follows:\n//   parseOptions('-a', {'a':'alice', 'b':'bob'});\n// Returns {'reference': 'string-value', 'bob': false} when passed two dictionaries of the form:\n//   parseOptions({'-r': 'string-value'}, {'r':'reference', 'b':'bob'});\n// Throws an error when passed a string that does not start with '-':\n//   parseOptions('a', {'a':'alice'}); // throws\nfunction parseOptions(opt, map, errorOptions) {\n  // Validate input\n  if (typeof opt !== 'string' && !isObject(opt)) {\n    throw new Error('options must be strings or key-value pairs');\n  } else if (!isObject(map)) {\n    throw new Error('parseOptions() internal error: map must be an object');\n  } else if (errorOptions && !isObject(errorOptions)) {\n    throw new Error('parseOptions() internal error: errorOptions must be object');\n  }\n  if (opt === '--') {\n    // This means there are no options.\n    return {};\n  }\n\n  // All options are false by default\n  var options = {};\n  Object.keys(map).forEach(function (letter) {\n    var optName = map[letter];\n    if (optName[0] !== '!') {\n      options[optName] = false;\n    }\n  });\n  if (opt === '') return options; // defaults\n\n  if (typeof opt === 'string') {\n    if (opt[0] !== '-') {\n      throw new Error(\"Options string must start with a '-'\");\n    }\n\n    // e.g. chars = ['R', 'f']\n    var chars = opt.slice(1).split('');\n    chars.forEach(function (c) {\n      if (c in map) {\n        var optionName = map[c];\n        if (optionName[0] === '!') {\n          options[optionName.slice(1)] = false;\n        } else {\n          options[optionName] = true;\n        }\n      } else {\n        error('option not recognized: ' + c, errorOptions || {});\n      }\n    });\n  } else {\n    // opt is an Object\n    Object.keys(opt).forEach(function (key) {\n      // key is a string of the form '-r', '-d', etc.\n      var c = key[1];\n      if (c in map) {\n        var optionName = map[c];\n        options[optionName] = opt[key]; // assign the given value\n      } else {\n        error('option not recognized: ' + c, errorOptions || {});\n      }\n    });\n  }\n  return options;\n}\nexports.parseOptions = parseOptions;\n\n// Expands wildcards with matching (ie. existing) file names.\n// For example:\n//   expand(['file*.js']) = ['file1.js', 'file2.js', ...]\n//   (if the files 'file1.js', 'file2.js', etc, exist in the current dir)\nfunction expand(list) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('must be an array');\n  }\n  var expanded = [];\n  list.forEach(function (listEl) {\n    // Don't expand non-strings\n    if (typeof listEl !== 'string') {\n      expanded.push(listEl);\n    } else {\n      var ret;\n      try {\n        ret = glob.sync(listEl, config.globOptions);\n        // if nothing matched, interpret the string literally\n        ret = ret.length > 0 ? ret : [listEl];\n      } catch (e) {\n        // if glob fails, interpret the string literally\n        ret = [listEl];\n      }\n      expanded = expanded.concat(ret);\n    }\n  });\n  return expanded;\n}\nexports.expand = expand;\n\n// Normalizes Buffer creation, using Buffer.alloc if possible.\n// Also provides a good default buffer length for most use cases.\nvar buffer = typeof Buffer.alloc === 'function' ? function (len) {\n  return Buffer.alloc(len || config.bufLength);\n} : function (len) {\n  return new Buffer(len || config.bufLength);\n};\nexports.buffer = buffer;\n\n// Normalizes _unlinkSync() across platforms to match Unix behavior, i.e.\n// file can be unlinked even if it's read-only, see https://github.com/joyent/node/issues/3006\nfunction unlinkSync(file) {\n  try {\n    fs.unlinkSync(file);\n  } catch (e) {\n    // Try to override file permission\n    /* istanbul ignore next */\n    if (e.code === 'EPERM') {\n      fs.chmodSync(file, '0666');\n      fs.unlinkSync(file);\n    } else {\n      throw e;\n    }\n  }\n}\nexports.unlinkSync = unlinkSync;\n\n// wrappers around common.statFollowLinks and common.statNoFollowLinks that clarify intent\n// and improve readability\nfunction statFollowLinks() {\n  return fs.statSync.apply(fs, arguments);\n}\nexports.statFollowLinks = statFollowLinks;\nfunction statNoFollowLinks() {\n  return fs.lstatSync.apply(fs, arguments);\n}\nexports.statNoFollowLinks = statNoFollowLinks;\n\n// e.g. 'shelljs_a5f185d0443ca...'\nfunction randomFileName() {\n  function randomHash(count) {\n    if (count === 1) {\n      return parseInt(16 * Math.random(), 10).toString(16);\n    }\n    var hash = '';\n    for (var i = 0; i < count; i++) {\n      hash += randomHash(1);\n    }\n    return hash;\n  }\n  return 'shelljs_' + randomHash(20);\n}\nexports.randomFileName = randomFileName;\n\n// Common wrapper for all Unix-like commands that performs glob expansion,\n// command-logging, and other nice things\nfunction wrap(cmd, fn, options) {\n  options = options || {};\n  return function () {\n    var retValue = null;\n    state.currentCmd = cmd;\n    state.error = null;\n    state.errorCode = 0;\n    try {\n      var args = [].slice.call(arguments, 0);\n\n      // Log the command to stderr, if appropriate\n      if (config.verbose) {\n        console.error.apply(console, [cmd].concat(args));\n      }\n\n      // If this is coming from a pipe, let's set the pipedValue (otherwise, set\n      // it to the empty string)\n      state.pipedValue = this && typeof this.stdout === 'string' ? this.stdout : '';\n      if (options.unix === false) {\n        // this branch is for exec()\n        retValue = fn.apply(this, args);\n      } else {\n        // and this branch is for everything else\n        if (isObject(args[0]) && args[0].constructor.name === 'Object') {\n          // a no-op, allowing the syntax `touch({'-r': file}, ...)`\n        } else if (args.length === 0 || typeof args[0] !== 'string' || args[0].length <= 1 || args[0][0] !== '-') {\n          args.unshift(''); // only add dummy option if '-option' not already present\n        }\n\n        // flatten out arrays that are arguments, to make the syntax:\n        //    `cp([file1, file2, file3], dest);`\n        // equivalent to:\n        //    `cp(file1, file2, file3, dest);`\n        args = args.reduce(function (accum, cur) {\n          if (Array.isArray(cur)) {\n            return accum.concat(cur);\n          }\n          accum.push(cur);\n          return accum;\n        }, []);\n\n        // Convert ShellStrings (basically just String objects) to regular strings\n        args = args.map(function (arg) {\n          if (isObject(arg) && arg.constructor.name === 'String') {\n            return arg.toString();\n          }\n          return arg;\n        });\n\n        // Expand the '~' if appropriate\n        var homeDir = os.homedir();\n        args = args.map(function (arg) {\n          if (typeof arg === 'string' && arg.slice(0, 2) === '~/' || arg === '~') {\n            return arg.replace(/^~/, homeDir);\n          }\n          return arg;\n        });\n\n        // Perform glob-expansion on all arguments after globStart, but preserve\n        // the arguments before it (like regexes for sed and grep)\n        if (!config.noglob && options.allowGlobbing === true) {\n          args = args.slice(0, options.globStart).concat(expand(args.slice(options.globStart)));\n        }\n        try {\n          // parse options if options are provided\n          if (isObject(options.cmdOptions)) {\n            args[0] = parseOptions(args[0], options.cmdOptions);\n          }\n          retValue = fn.apply(this, args);\n        } catch (e) {\n          /* istanbul ignore else */\n          if (e.msg === 'earlyExit') {\n            retValue = e.retValue;\n          } else {\n            throw e; // this is probably a bug that should be thrown up the call stack\n          }\n        }\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      if (!state.error) {\n        // If state.error hasn't been set it's an error thrown by Node, not us - probably a bug...\n        e.name = 'ShellJSInternalError';\n        throw e;\n      }\n      if (config.fatal) throw e;\n    }\n    if (options.wrapOutput && (typeof retValue === 'string' || Array.isArray(retValue))) {\n      retValue = new ShellString(retValue, state.error, state.errorCode);\n    }\n    state.currentCmd = 'shell.js';\n    return retValue;\n  };\n} // wrap\nexports.wrap = wrap;\n\n// This returns all the input that is piped into the current command (or the\n// empty string, if this isn't on the right-hand side of a pipe\nfunction _readFromPipe() {\n  return state.pipedValue;\n}\nexports.readFromPipe = _readFromPipe;\nvar DEFAULT_WRAP_OPTIONS = {\n  allowGlobbing: true,\n  canReceivePipe: false,\n  cmdOptions: null,\n  globStart: 1,\n  pipeOnly: false,\n  wrapOutput: true,\n  unix: true\n};\n\n// This is populated during plugin registration\nvar pipeMethods = [];\n\n// Register a new ShellJS command\nfunction _register(name, implementation, wrapOptions) {\n  wrapOptions = wrapOptions || {};\n\n  // Validate options\n  Object.keys(wrapOptions).forEach(function (option) {\n    if (!DEFAULT_WRAP_OPTIONS.hasOwnProperty(option)) {\n      throw new Error(\"Unknown option '\" + option + \"'\");\n    }\n    if (typeof wrapOptions[option] !== typeof DEFAULT_WRAP_OPTIONS[option]) {\n      throw new TypeError(\"Unsupported type '\" + typeof wrapOptions[option] + \"' for option '\" + option + \"'\");\n    }\n  });\n\n  // If an option isn't specified, use the default\n  wrapOptions = Object.assign({}, DEFAULT_WRAP_OPTIONS, wrapOptions);\n  if (shell.hasOwnProperty(name)) {\n    throw new Error('Command `' + name + '` already exists');\n  }\n  if (wrapOptions.pipeOnly) {\n    wrapOptions.canReceivePipe = true;\n    shellMethods[name] = wrap(name, implementation, wrapOptions);\n  } else {\n    shell[name] = wrap(name, implementation, wrapOptions);\n  }\n  if (wrapOptions.canReceivePipe) {\n    pipeMethods.push(name);\n  }\n}\nexports.register = _register;","map":{"version":3,"names":["os","require","fs","glob","shell","shellMethods","Object","create","exports","extend","assign","isElectron","Boolean","process","versions","electron","DEFAULT_CONFIG","fatal","globOptions","maxdepth","noglob","silent","verbose","execPath","bufLength","config","reset","resetForTesting","state","error","errorCode","currentCmd","env","OLDPWD","isObject","a","log","console","apply","arguments","convertErrorOutput","msg","TypeError","replace","_code","options","Error","DEFAULT_OPTIONS","continue","code","prefix","logEntry","length","retValue","ShellString","stdout","stderr","that","Array","join","String","pipeMethods","forEach","cmd","bind","parseOptions","opt","map","errorOptions","keys","letter","optName","chars","slice","split","c","optionName","key","expand","list","isArray","expanded","listEl","push","ret","sync","e","concat","buffer","Buffer","alloc","len","unlinkSync","file","chmodSync","statFollowLinks","statSync","statNoFollowLinks","lstatSync","randomFileName","randomHash","count","parseInt","Math","random","toString","hash","i","wrap","fn","args","call","pipedValue","unix","constructor","name","unshift","reduce","accum","cur","arg","homeDir","homedir","allowGlobbing","globStart","cmdOptions","wrapOutput","_readFromPipe","readFromPipe","DEFAULT_WRAP_OPTIONS","canReceivePipe","pipeOnly","_register","implementation","wrapOptions","option","hasOwnProperty","register"],"sources":["/home/lenovo/node_modules/shelljs/src/common.js"],"sourcesContent":["// Ignore warning about 'new String()'\n/* eslint no-new-wrappers: 0 */\n'use strict';\n\nvar os = require('os');\nvar fs = require('fs');\nvar glob = require('glob');\nvar shell = require('..');\n\nvar shellMethods = Object.create(shell);\n\nexports.extend = Object.assign;\n\n// Check if we're running under electron\nvar isElectron = Boolean(process.versions.electron);\n\n// Module globals (assume no execPath by default)\nvar DEFAULT_CONFIG = {\n  fatal: false,\n  globOptions: {},\n  maxdepth: 255,\n  noglob: false,\n  silent: false,\n  verbose: false,\n  execPath: null,\n  bufLength: 64 * 1024, // 64KB\n};\n\nvar config = {\n  reset: function () {\n    Object.assign(this, DEFAULT_CONFIG);\n    if (!isElectron) {\n      this.execPath = process.execPath;\n    }\n  },\n  resetForTesting: function () {\n    this.reset();\n    this.silent = true;\n  },\n};\n\nconfig.reset();\nexports.config = config;\n\n// Note: commands should generally consider these as read-only values.\nvar state = {\n  error: null,\n  errorCode: 0,\n  currentCmd: 'shell.js',\n};\nexports.state = state;\n\ndelete process.env.OLDPWD; // initially, there's no previous directory\n\n// Reliably test if something is any sort of javascript object\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\nexports.isObject = isObject;\n\nfunction log() {\n  /* istanbul ignore next */\n  if (!config.silent) {\n    console.error.apply(console, arguments);\n  }\n}\nexports.log = log;\n\n// Converts strings to be equivalent across all platforms. Primarily responsible\n// for making sure we use '/' instead of '\\' as path separators, but this may be\n// expanded in the future if necessary\nfunction convertErrorOutput(msg) {\n  if (typeof msg !== 'string') {\n    throw new TypeError('input must be a string');\n  }\n  return msg.replace(/\\\\/g, '/');\n}\nexports.convertErrorOutput = convertErrorOutput;\n\n// Shows error message. Throws if config.fatal is true\nfunction error(msg, _code, options) {\n  // Validate input\n  if (typeof msg !== 'string') throw new Error('msg must be a string');\n\n  var DEFAULT_OPTIONS = {\n    continue: false,\n    code: 1,\n    prefix: state.currentCmd + ': ',\n    silent: false,\n  };\n\n  if (typeof _code === 'number' && isObject(options)) {\n    options.code = _code;\n  } else if (isObject(_code)) { // no 'code'\n    options = _code;\n  } else if (typeof _code === 'number') { // no 'options'\n    options = { code: _code };\n  } else if (typeof _code !== 'number') { // only 'msg'\n    options = {};\n  }\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n  if (!state.errorCode) state.errorCode = options.code;\n\n  var logEntry = convertErrorOutput(options.prefix + msg);\n  state.error = state.error ? state.error + '\\n' : '';\n  state.error += logEntry;\n\n  // Throw an error, or log the entry\n  if (config.fatal) throw new Error(logEntry);\n  if (msg.length > 0 && !options.silent) log(logEntry);\n\n  if (!options.continue) {\n    throw {\n      msg: 'earlyExit',\n      retValue: (new ShellString('', state.error, state.errorCode)),\n    };\n  }\n}\nexports.error = error;\n\n//@\n//@ ### ShellString(str)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var foo = ShellString('hello world');\n//@ ```\n//@\n//@ Turns a regular string into a string-like object similar to what each\n//@ command returns. This has special methods, like `.to()` and `.toEnd()`.\nfunction ShellString(stdout, stderr, code) {\n  var that;\n  if (stdout instanceof Array) {\n    that = stdout;\n    that.stdout = stdout.join('\\n');\n    if (stdout.length > 0) that.stdout += '\\n';\n  } else {\n    that = new String(stdout);\n    that.stdout = stdout;\n  }\n  that.stderr = stderr;\n  that.code = code;\n  // A list of all commands that can appear on the right-hand side of a pipe\n  // (populated by calls to common.wrap())\n  pipeMethods.forEach(function (cmd) {\n    that[cmd] = shellMethods[cmd].bind(that);\n  });\n  return that;\n}\n\nexports.ShellString = ShellString;\n\n// Returns {'alice': true, 'bob': false} when passed a string and dictionary as follows:\n//   parseOptions('-a', {'a':'alice', 'b':'bob'});\n// Returns {'reference': 'string-value', 'bob': false} when passed two dictionaries of the form:\n//   parseOptions({'-r': 'string-value'}, {'r':'reference', 'b':'bob'});\n// Throws an error when passed a string that does not start with '-':\n//   parseOptions('a', {'a':'alice'}); // throws\nfunction parseOptions(opt, map, errorOptions) {\n  // Validate input\n  if (typeof opt !== 'string' && !isObject(opt)) {\n    throw new Error('options must be strings or key-value pairs');\n  } else if (!isObject(map)) {\n    throw new Error('parseOptions() internal error: map must be an object');\n  } else if (errorOptions && !isObject(errorOptions)) {\n    throw new Error('parseOptions() internal error: errorOptions must be object');\n  }\n\n  if (opt === '--') {\n    // This means there are no options.\n    return {};\n  }\n\n  // All options are false by default\n  var options = {};\n  Object.keys(map).forEach(function (letter) {\n    var optName = map[letter];\n    if (optName[0] !== '!') {\n      options[optName] = false;\n    }\n  });\n\n  if (opt === '') return options; // defaults\n\n  if (typeof opt === 'string') {\n    if (opt[0] !== '-') {\n      throw new Error(\"Options string must start with a '-'\");\n    }\n\n    // e.g. chars = ['R', 'f']\n    var chars = opt.slice(1).split('');\n\n    chars.forEach(function (c) {\n      if (c in map) {\n        var optionName = map[c];\n        if (optionName[0] === '!') {\n          options[optionName.slice(1)] = false;\n        } else {\n          options[optionName] = true;\n        }\n      } else {\n        error('option not recognized: ' + c, errorOptions || {});\n      }\n    });\n  } else { // opt is an Object\n    Object.keys(opt).forEach(function (key) {\n      // key is a string of the form '-r', '-d', etc.\n      var c = key[1];\n      if (c in map) {\n        var optionName = map[c];\n        options[optionName] = opt[key]; // assign the given value\n      } else {\n        error('option not recognized: ' + c, errorOptions || {});\n      }\n    });\n  }\n  return options;\n}\nexports.parseOptions = parseOptions;\n\n// Expands wildcards with matching (ie. existing) file names.\n// For example:\n//   expand(['file*.js']) = ['file1.js', 'file2.js', ...]\n//   (if the files 'file1.js', 'file2.js', etc, exist in the current dir)\nfunction expand(list) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('must be an array');\n  }\n  var expanded = [];\n  list.forEach(function (listEl) {\n    // Don't expand non-strings\n    if (typeof listEl !== 'string') {\n      expanded.push(listEl);\n    } else {\n      var ret;\n      try {\n        ret = glob.sync(listEl, config.globOptions);\n        // if nothing matched, interpret the string literally\n        ret = ret.length > 0 ? ret : [listEl];\n      } catch (e) {\n        // if glob fails, interpret the string literally\n        ret = [listEl];\n      }\n      expanded = expanded.concat(ret);\n    }\n  });\n  return expanded;\n}\nexports.expand = expand;\n\n// Normalizes Buffer creation, using Buffer.alloc if possible.\n// Also provides a good default buffer length for most use cases.\nvar buffer = typeof Buffer.alloc === 'function' ?\n  function (len) {\n    return Buffer.alloc(len || config.bufLength);\n  } :\n  function (len) {\n    return new Buffer(len || config.bufLength);\n  };\nexports.buffer = buffer;\n\n// Normalizes _unlinkSync() across platforms to match Unix behavior, i.e.\n// file can be unlinked even if it's read-only, see https://github.com/joyent/node/issues/3006\nfunction unlinkSync(file) {\n  try {\n    fs.unlinkSync(file);\n  } catch (e) {\n    // Try to override file permission\n    /* istanbul ignore next */\n    if (e.code === 'EPERM') {\n      fs.chmodSync(file, '0666');\n      fs.unlinkSync(file);\n    } else {\n      throw e;\n    }\n  }\n}\nexports.unlinkSync = unlinkSync;\n\n// wrappers around common.statFollowLinks and common.statNoFollowLinks that clarify intent\n// and improve readability\nfunction statFollowLinks() {\n  return fs.statSync.apply(fs, arguments);\n}\nexports.statFollowLinks = statFollowLinks;\n\nfunction statNoFollowLinks() {\n  return fs.lstatSync.apply(fs, arguments);\n}\nexports.statNoFollowLinks = statNoFollowLinks;\n\n// e.g. 'shelljs_a5f185d0443ca...'\nfunction randomFileName() {\n  function randomHash(count) {\n    if (count === 1) {\n      return parseInt(16 * Math.random(), 10).toString(16);\n    }\n    var hash = '';\n    for (var i = 0; i < count; i++) {\n      hash += randomHash(1);\n    }\n    return hash;\n  }\n\n  return 'shelljs_' + randomHash(20);\n}\nexports.randomFileName = randomFileName;\n\n// Common wrapper for all Unix-like commands that performs glob expansion,\n// command-logging, and other nice things\nfunction wrap(cmd, fn, options) {\n  options = options || {};\n  return function () {\n    var retValue = null;\n\n    state.currentCmd = cmd;\n    state.error = null;\n    state.errorCode = 0;\n\n    try {\n      var args = [].slice.call(arguments, 0);\n\n      // Log the command to stderr, if appropriate\n      if (config.verbose) {\n        console.error.apply(console, [cmd].concat(args));\n      }\n\n      // If this is coming from a pipe, let's set the pipedValue (otherwise, set\n      // it to the empty string)\n      state.pipedValue = (this && typeof this.stdout === 'string') ? this.stdout : '';\n\n      if (options.unix === false) { // this branch is for exec()\n        retValue = fn.apply(this, args);\n      } else { // and this branch is for everything else\n        if (isObject(args[0]) && args[0].constructor.name === 'Object') {\n          // a no-op, allowing the syntax `touch({'-r': file}, ...)`\n        } else if (args.length === 0 || typeof args[0] !== 'string' || args[0].length <= 1 || args[0][0] !== '-') {\n          args.unshift(''); // only add dummy option if '-option' not already present\n        }\n\n        // flatten out arrays that are arguments, to make the syntax:\n        //    `cp([file1, file2, file3], dest);`\n        // equivalent to:\n        //    `cp(file1, file2, file3, dest);`\n        args = args.reduce(function (accum, cur) {\n          if (Array.isArray(cur)) {\n            return accum.concat(cur);\n          }\n          accum.push(cur);\n          return accum;\n        }, []);\n\n        // Convert ShellStrings (basically just String objects) to regular strings\n        args = args.map(function (arg) {\n          if (isObject(arg) && arg.constructor.name === 'String') {\n            return arg.toString();\n          }\n          return arg;\n        });\n\n        // Expand the '~' if appropriate\n        var homeDir = os.homedir();\n        args = args.map(function (arg) {\n          if (typeof arg === 'string' && arg.slice(0, 2) === '~/' || arg === '~') {\n            return arg.replace(/^~/, homeDir);\n          }\n          return arg;\n        });\n\n        // Perform glob-expansion on all arguments after globStart, but preserve\n        // the arguments before it (like regexes for sed and grep)\n        if (!config.noglob && options.allowGlobbing === true) {\n          args = args.slice(0, options.globStart).concat(expand(args.slice(options.globStart)));\n        }\n\n        try {\n          // parse options if options are provided\n          if (isObject(options.cmdOptions)) {\n            args[0] = parseOptions(args[0], options.cmdOptions);\n          }\n\n          retValue = fn.apply(this, args);\n        } catch (e) {\n          /* istanbul ignore else */\n          if (e.msg === 'earlyExit') {\n            retValue = e.retValue;\n          } else {\n            throw e; // this is probably a bug that should be thrown up the call stack\n          }\n        }\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      if (!state.error) {\n        // If state.error hasn't been set it's an error thrown by Node, not us - probably a bug...\n        e.name = 'ShellJSInternalError';\n        throw e;\n      }\n      if (config.fatal) throw e;\n    }\n\n    if (options.wrapOutput &&\n        (typeof retValue === 'string' || Array.isArray(retValue))) {\n      retValue = new ShellString(retValue, state.error, state.errorCode);\n    }\n\n    state.currentCmd = 'shell.js';\n    return retValue;\n  };\n} // wrap\nexports.wrap = wrap;\n\n// This returns all the input that is piped into the current command (or the\n// empty string, if this isn't on the right-hand side of a pipe\nfunction _readFromPipe() {\n  return state.pipedValue;\n}\nexports.readFromPipe = _readFromPipe;\n\nvar DEFAULT_WRAP_OPTIONS = {\n  allowGlobbing: true,\n  canReceivePipe: false,\n  cmdOptions: null,\n  globStart: 1,\n  pipeOnly: false,\n  wrapOutput: true,\n  unix: true,\n};\n\n// This is populated during plugin registration\nvar pipeMethods = [];\n\n// Register a new ShellJS command\nfunction _register(name, implementation, wrapOptions) {\n  wrapOptions = wrapOptions || {};\n\n  // Validate options\n  Object.keys(wrapOptions).forEach(function (option) {\n    if (!DEFAULT_WRAP_OPTIONS.hasOwnProperty(option)) {\n      throw new Error(\"Unknown option '\" + option + \"'\");\n    }\n    if (typeof wrapOptions[option] !== typeof DEFAULT_WRAP_OPTIONS[option]) {\n      throw new TypeError(\"Unsupported type '\" + typeof wrapOptions[option] +\n        \"' for option '\" + option + \"'\");\n    }\n  });\n\n  // If an option isn't specified, use the default\n  wrapOptions = Object.assign({}, DEFAULT_WRAP_OPTIONS, wrapOptions);\n\n  if (shell.hasOwnProperty(name)) {\n    throw new Error('Command `' + name + '` already exists');\n  }\n\n  if (wrapOptions.pipeOnly) {\n    wrapOptions.canReceivePipe = true;\n    shellMethods[name] = wrap(name, implementation, wrapOptions);\n  } else {\n    shell[name] = wrap(name, implementation, wrapOptions);\n  }\n\n  if (wrapOptions.canReceivePipe) {\n    pipeMethods.push(name);\n  }\n}\nexports.register = _register;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}